FILE: .\boot.asm                        (0001) ; Generated by PSoC Designer 5.1.2101.0
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#897 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.21
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C29xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2010. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116) 
                                        (0117)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0118)     halt                           ;Stop execution if power falls too low
                                        (0119) 
                                        (0120)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0121)     // call	void_handler
0008: 7E       RETI                     (0122)     reti
                                        (0123) 
                                        (0124)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0125)     // call	void_handler
000C: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0129)     // call	void_handler
0010: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0133)     // call	void_handler
0014: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   18h                      ;VC3 Interrupt Vector
                                        (0137)     // call	void_handler
0018: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0141)     // call	void_handler
001C: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
0020: 7D 04 43 LJMP  _UART_CLOCK_ISR    (0145)     ljmp	_UART_CLOCK_ISR
0023: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
                                        (0149)     // call	void_handler
0024: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
0028: 7D 03 CE LJMP  _UART_TX_ISR       (0153)     ljmp	_UART_TX_ISR
002B: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
002C: 7D 03 CF LJMP  _UART_RX_ISR       (0157)     ljmp	_UART_RX_ISR
002F: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0161)     // call	void_handler
0030: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                        (0165)     // call	void_handler
0034: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0169)     // call	void_handler
0038: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0173)     // call	void_handler
003C: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   40h                      ;PSoC Block DBB20 Interrupt Vector
                                        (0177)     // call	void_handler
0040: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   44h                      ;PSoC Block DBB21 Interrupt Vector
                                        (0181)     // call	void_handler
0044: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   48h                      ;PSoC Block DCB22 Interrupt Vector
                                        (0185)     // call	void_handler
0048: 7E       RETI                     (0186)     reti
                                        (0187) 
                                        (0188)     org   4Ch                      ;PSoC Block DCB23 Interrupt Vector
                                        (0189)     // call	void_handler
004C: 7E       RETI                     (0190)     reti
                                        (0191) 
                                        (0192)     org   50h                      ;PSoC Block DBB30 Interrupt Vector
                                        (0193)     // call	void_handler
0050: 7E       RETI                     (0194)     reti
                                        (0195) 
                                        (0196)     org   54h                      ;PSoC Block DBB31 Interrupt Vector
                                        (0197)     // call	void_handler
0054: 7E       RETI                     (0198)     reti
                                        (0199) 
                                        (0200)     org   58h                      ;PSoC Block DCB32 Interrupt Vector
                                        (0201)     // call	void_handler
0058: 7E       RETI                     (0202)     reti
                                        (0203) 
                                        (0204)     org   5Ch                      ;PSoC Block DCB33 Interrupt Vector
                                        (0205)     // call	void_handler
005C: 7E       RETI                     (0206)     reti
                                        (0207) 
                                        (0208)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0209)     // call	void_handler
0060: 7E       RETI                     (0210)     reti
                                        (0211) 
                                        (0212)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0213)     // call	void_handler
0064: 7E       RETI                     (0214)     reti
0068: 71 10    OR    F,0x10             
                                        (0215) 
                                        (0216) ;-----------------------------------------------------------------------------
                                        (0217) ;  Start of Execution.
                                        (0218) ;-----------------------------------------------------------------------------
                                        (0219) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0220) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0221) ;
                                        (0222) 
                                        (0223) IF	(TOOLCHAIN & HITECH)
                                        (0224)  	AREA PD_startup(CODE, REL, CON)
                                        (0225) ELSE
                                        (0226)     org 68h
                                        (0227) ENDIF
                                        (0228) __Start:
                                        (0229) 
                                        (0230)     ; initialize SMP values for voltage stabilization, if required,
                                        (0231)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0232)     ; least for now. 
                                        (0233)     ;
                                        (0234)     M8C_SetBank1
006A: 62 FA 00 MOV   REG[0xFA],0x0      (0235)     mov reg[0FAh], 0				;Reset flash location
006D: 62 E3 87 MOV   REG[0xE3],0x87     (0236)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
0070: 70 EF    AND   F,0xEF             
                                        (0237)     M8C_SetBank0
                                        (0238) 
                                        (0239)     ; %53%20%46%46% Apply Erratum 001-05137 workaround
0072: 50 20    MOV   A,0x20             (0240)     mov   A, 20h
0074: 28       ROMX                     (0241)     romx
0075: 50 40    MOV   A,0x40             (0242)     mov   A, 40h
0077: 28       ROMX                     (0243)     romx
0078: 50 60    MOV   A,0x60             (0244)     mov   A, 60h
007A: 28       ROMX                     (0245)     romx
007B: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0246)     ; %45%20%46%46% End workaround
                                        (0247) 
                                        (0248) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0249) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0250)     M8C_EnableWatchDog
                                        (0251) ENDIF
                                        (0252) 
                                        (0253) IF ( SELECT_32K )
                                        (0254)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0255) ELSE
007E: 41 FE FB AND   REG[0xFE],0xFB     (0256)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0257) ENDIF
                                        (0258) 
                                        (0259)     ;---------------------------
                                        (0260)     ; Set up the Temporary stack
                                        (0261)     ;---------------------------
                                        (0262)     ; A temporary stack is set up for the SSC instructions.
                                        (0263)     ; The real stack start will be assigned later.
                                        (0264)     ;
                                        (0265) _stack_start:          equ 80h
0081: 50 80    MOV   A,0x80             (0266)     mov   A, _stack_start          ; Set top of stack to end of used RAM
0083: 4E       SWAP  SP,A               (0267)     swap  SP, A                    ; This is only temporary if going to LMM
0084: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0268) 
                                        (0269)     ;-----------------------------------------------
                                        (0270)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0271)     ;-----------------------------------------------
                                        (0272) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0273) 
                                        (0274) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0275)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0276)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0277)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0278)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0279)   IF ( AGND_BYPASS )
                                        (0280)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0281)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0282)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0283)     ; value using the proper trim values.
                                        (0284)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0285)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0286)   ENDIF
                                        (0287)  ENDIF
                                        (0288) ENDIF ; 5.0 V Operation
                                        (0289) 
                                        (0290) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0291)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0292)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0293)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0294)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0295)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0296)  ENDIF
                                        (0297) ENDIF ; 3.3 Volt Operation
                                        (0298) 
0087: 55 F8 00 MOV   [0xF8],0x0         (0299)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
008A: 55 F9 00 MOV   [0xF9],0x0         (0300)     mov  [bSSC_KEYSP], 0
008D: 71 10    OR    F,0x10             
                                        (0301) 
                                        (0302)     ;---------------------------------------
                                        (0303)     ; Initialize Crystal Oscillator and PLL
                                        (0304)     ;---------------------------------------
                                        (0305) 
                                        (0306) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0307)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0308)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0309)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0310)     ; the ECO to stabilize.
                                        (0311)     ;
                                        (0312)     M8C_SetBank1
                                        (0313)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0314)     M8C_SetBank0
                                        (0315)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0316)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0317)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0318) .WaitFor1s:
                                        (0319)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0320)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0321)                                           ;   since interrupts are not globally enabled
                                        (0322) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0323)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0324)     M8C_SetBank1
008F: 62 E0 02 MOV   REG[0xE0],0x2      (0325)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0092: 70 EF    AND   F,0xEF             
0094: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0326)     M8C_SetBank0
                                        (0327)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0328) 
                                        (0329) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0330) 
                                        (0331) IF ( PLL_MODE )
                                        (0332)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0333)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0334)     ;
                                        (0335)     M8C_SetBank1
                                        (0336)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0337)     M8C_SetBank0
                                        (0338)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0339)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0340) 
                                        (0341) .WaitFor16ms:
                                        (0342)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0343)     jz   .WaitFor16ms
                                        (0344)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0345)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0346)     M8C_SetBank0
                                        (0347) 
                                        (0348) IF      ( WAIT_FOR_32K )
                                        (0349) ELSE ; !( WAIT_FOR_32K )
                                        (0350)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0351)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0352) ENDIF ;(WAIT_FOR_32K)
                                        (0353) ENDIF ;(PLL_MODE)
                                        (0354) 
                                        (0355) 	;-------------------------------------------------------
                                        (0356)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0357)     ;-------------------------------------------------------
                                        (0358) 
                                        (0359)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0360) 
                                        (0361) IF (SYSCLK_SOURCE)
                                        (0362)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0363) ENDIF
                                        (0364)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0365) 
                                        (0366)     ;------------------------
                                        (0367)     ; Close CT leakage path.
                                        (0368)     ;------------------------
0097: 62 71 05 MOV   REG[0x71],0x5      (0369)     mov   reg[ACB00CR0], 05h
009A: 62 75 05 MOV   REG[0x75],0x5      (0370)     mov   reg[ACB01CR0], 05h
009D: 62 79 05 MOV   REG[0x79],0x5      (0371)     mov   reg[ACB02CR0], 05h
00A0: 62 7D 05 MOV   REG[0x7D],0x5      (0372)     mov   reg[ACB03CR0], 05h
00A3: 62 D1 07 MOV   REG[0xD1],0x7      
                                        (0373) 
                                        (0374) 
                                        (0375) IF	(TOOLCHAIN & HITECH)
                                        (0376)     ;---------------------------------------------
                                        (0377)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0378)     ;---------------------------------------------
                                        (0379) 	global		__Lstackps
                                        (0380) 	mov     a,low __Lstackps
                                        (0381) 	swap    a,sp
                                        (0382) 
                                        (0383) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0384)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0385)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0386)     RAM_SETPAGE_CUR 0
                                        (0387)     RAM_SETPAGE_MVW 0
                                        (0388)     RAM_SETPAGE_MVR 0
                                        (0389)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0390)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0391)     ELSE
                                        (0392)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0393)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0394) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0395) ELSE
                                        (0396)     ;---------------------------------------------
                                        (0397)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0398)     ;---------------------------------------------
                                        (0399) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0400)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
00A6: 50 00    MOV   A,0x0              (0401)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
00A8: 4E       SWAP  SP,A               (0402)     swap  A, SP
00A9: 62 D3 07 MOV   REG[0xD3],0x7      
00AC: 62 D0 00 MOV   REG[0xD0],0x0      
00AF: 62 D5 00 MOV   REG[0xD5],0x0      
00B2: 62 D4 00 MOV   REG[0xD4],0x0      
                                        (0403)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0404)     RAM_SETPAGE_CUR 0
                                        (0405)     RAM_SETPAGE_MVW 0
                                        (0406)     RAM_SETPAGE_MVR 0
                                        (0407) 
                                        (0408)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00B5: 71 C0    OR    F,0xC0             (0409)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0410)   ELSE
                                        (0411)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0412)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0413) ELSE
                                        (0414)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0415)     swap  SP, A
                                        (0416) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0417) ENDIF ;	TOOLCHAIN
                                        (0418) 
                                        (0419)     ;-------------------------
                                        (0420)     ; Load Base Configuration
                                        (0421)     ;-------------------------
                                        (0422)     ; Load global parameter settings and load the user modules in the
                                        (0423)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0424)     ; to minimize start up time; (2) We may still need to play with the
                                        (0425)     ; Sleep Timer.
                                        (0426)     ;
00B7: 7C 03 6C LCALL 0x036C             (0427)     lcall LoadConfigInit
                                        (0428) 
                                        (0429)     ;-----------------------------------
                                        (0430)     ; Initialize C Run-Time Environment
                                        (0431)     ;-----------------------------------
                                        (0432) IF ( C_LANGUAGE_SUPPORT )
                                        (0433) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0434)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0435)     mov  [__r0],<__bss_start
                                        (0436) BssLoop:
                                        (0437)     cmp  [__r0],<__bss_end
                                        (0438)     jz   BssDone
                                        (0439)     mvi  [__r0],A
                                        (0440)     jmp  BssLoop
                                        (0441) BssDone:
                                        (0442)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0443)     mov  X,<__idata_start
                                        (0444)     mov  [__r0],<__data_start
                                        (0445) IDataLoop:
                                        (0446)     cmp  [__r0],<__data_end
                                        (0447)     jz   C_RTE_Done
                                        (0448)     push A
                                        (0449)     romx
                                        (0450)     mvi  [__r0],A
                                        (0451)     pop  A
                                        (0452)     inc  X
                                        (0453)     adc  A,0
                                        (0454)     jmp  IDataLoop
                                        (0455) 
                                        (0456) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0457) 
                                        (0458) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00BA: 62 D0 00 MOV   REG[0xD0],0x0      (0459)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0460)                                        ; to use the Virtual Register page.
                                        (0461) 
                                        (0462)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0463)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0464)     ; text segment and may have been relocated by the Code Compressor.
                                        (0465)     ;
00BD: 50 02    MOV   A,0x2              (0466)     mov   A, >__pXIData                ; Get the address of the flash
00BF: 57 65    MOV   X,0x65             (0467)     mov   X, <__pXIData                ;   pointer to the xidata area.
00C1: 08       PUSH  A                  (0468)     push  A
00C2: 28       ROMX                     (0469)     romx                               ; get the MSB of xidata's address
00C3: 53 13    MOV   [__r0],A           (0470)     mov   [__r0], A
00C5: 18       POP   A                  (0471)     pop   A
00C6: 75       INC   X                  (0472)     inc   X
00C7: 09 00    ADC   A,0x0              (0473)     adc   A, 0
00C9: 28       ROMX                     (0474)     romx                               ; get the LSB of xidata's address
00CA: 4B       SWAP  A,X                (0475)     swap  A, X
00CB: 51 13    MOV   A,[__r0]           (0476)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0477)                                        ;   XIData structure list in flash
00CD: 80 04    JMP   0x00D2             (0478)     jmp   .AccessStruct
                                        (0479) 
                                        (0480)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0481)     ; values of C variables. Each structure contains 3 member elements.
                                        (0482)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0483)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0484)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0485)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0486)     ; value in the second member element, an unsigned byte:
                                        (0487)     ; (1) If the value of the second element is non-zero, it represents
                                        (0488)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0489)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0490)     ; the bytes are copied to the block of RAM.
                                        (0491)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0492)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0493)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0494) 
                                        (0495) .AccessNextStructLoop:
00CF: 75       INC   X                  (0496)     inc   X                            ; pXIData++
00D0: 09 00    ADC   A,0x0              (0497)     adc   A, 0
00D2: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0498) .AccessStruct:                         ; Entry point for first block
                                        (0499)     ;
                                        (0500)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0501)     ;
                                        (0502)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00D5: 08       PUSH  A                  (0503)     push  A
00D6: 28       ROMX                     (0504)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00D7: 60 D5    MOV   REG[0xD5],A        (0505)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00D9: 74       INC   A                  (0506)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00DA: A0 4B    JZ    0x0126             (0507)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00DC: 18       POP   A                  (0508)     pop   A                            ; restore pXIData to [A,X]
00DD: 75       INC   X                  (0509)     inc   X                            ; pXIData++
00DE: 09 00    ADC   A,0x0              (0510)     adc   A, 0
00E0: 08       PUSH  A                  (0511)     push  A
00E1: 28       ROMX                     (0512)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00E2: 53 13    MOV   [__r0],A           (0513)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00E4: 18       POP   A                  (0514)     pop   A                            ; restore pXIData to [A,X]
00E5: 75       INC   X                  (0515)     inc   X                            ; pXIData++ (point to size)
00E6: 09 00    ADC   A,0x0              (0516)     adc   A, 0
00E8: 08       PUSH  A                  (0517)     push  A
00E9: 28       ROMX                     (0518)     romx                               ; Get the size (CPU.A <- *pXIData)
00EA: A0 1C    JZ    0x0107             (0519)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00EC: 53 12    MOV   [__r1],A           (0520)     mov   [__r1], A                    ;             else downcount in __r1
00EE: 18       POP   A                  (0521)     pop   A                            ; restore pXIData to [A,X]
                                        (0522) 
                                        (0523) .CopyNextByteLoop:
                                        (0524)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0525)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0526)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0527)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0528)     ;
00EF: 75       INC   X                  (0529)     inc   X                            ; pXIData++ (point to next data byte)
00F0: 09 00    ADC   A,0x0              (0530)     adc   A, 0
00F2: 08       PUSH  A                  (0531)     push  A
00F3: 28       ROMX                     (0532)     romx                               ; Get the data value (CPU.A <- *pXIData)
00F4: 3F 13    MVI   [__r0],A           (0533)     mvi   [__r0], A                    ; Transfer the data to RAM
00F6: 47 13 FF TST   [__r0],0xFF        (0534)     tst   [__r0], 0xff                 ; Check for page crossing
00F9: B0 06    JNZ   0x0100             (0535)     jnz   .CopyLoopTail                ;   No crossing, keep going
00FB: 5D D5    MOV   A,REG[0xD5]        (0536)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
00FD: 74       INC   A                  (0537)     inc   A
00FE: 60 D5    MOV   REG[0xD5],A        (0538)     mov   reg[ MVW_PP], A
                                        (0539) .CopyLoopTail:
0100: 18       POP   A                  (0540)     pop   A                            ; restore pXIData to [A,X]
0101: 7A 12    DEC   [__r1]             (0541)     dec   [__r1]                       ; End of this array in flash?
0103: BF EB    JNZ   0x00EF             (0542)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
0105: 8F C9    JMP   0x00CF             (0543)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0544) 
                                        (0545) .ClearRAMBlockToZero:
0107: 18       POP   A                  (0546)     pop   A                            ; restore pXIData to [A,X]
0108: 75       INC   X                  (0547)     inc   X                            ; pXIData++ (point to next data byte)
0109: 09 00    ADC   A,0x0              (0548)     adc   A, 0
010B: 08       PUSH  A                  (0549)     push  A
010C: 28       ROMX                     (0550)     romx                               ; Get the run length (CPU.A <- *pXIData)
010D: 53 12    MOV   [__r1],A           (0551)     mov   [__r1], A                    ; Initialize downcounter
010F: 50 00    MOV   A,0x0              (0552)     mov   A, 0                         ; Initialize source data
                                        (0553) 
                                        (0554) .ClearRAMBlockLoop:
                                        (0555)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0556)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0557)     ;
0111: 3F 13    MVI   [__r0],A           (0558)     mvi   [__r0], A                    ; Clear a byte
0113: 47 13 FF TST   [__r0],0xFF        (0559)     tst   [__r0], 0xff                 ; Check for page crossing
0116: B0 08    JNZ   0x011F             (0560)     jnz   .ClearLoopTail               ;   No crossing, keep going
0118: 5D D5    MOV   A,REG[0xD5]        (0561)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
011A: 74       INC   A                  (0562)     inc   A
011B: 60 D5    MOV   REG[0xD5],A        (0563)     mov   reg[ MVW_PP], A
011D: 50 00    MOV   A,0x0              (0564)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0565) .ClearLoopTail:
011F: 7A 12    DEC   [__r1]             (0566)     dec   [__r1]                       ; Was this the last byte?
0121: BF EF    JNZ   0x0111             (0567)     jnz   .ClearRAMBlockLoop           ;   No,  continue
0123: 18       POP   A                  (0568)     pop   A                            ;   Yes, restore pXIData to [A,X] and
0124: 8F AA    JMP   0x00CF             (0569)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0570) 
                                        (0571) .C_RTE_WrapUp:
0126: 18       POP   A                  (0572)     pop   A                            ; balance stack
0127: 71 10    OR    F,0x10             
0129: 70 EF    AND   F,0xEF             
                                        (0573) 
                                        (0574) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0575) 
                                        (0576) C_RTE_Done:
                                        (0577) 
                                        (0578) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0579) 
                                        (0580)     ;-------------------------------
                                        (0581)     ; Voltage Stabilization for SMP
                                        (0582)     ;-------------------------------
                                        (0583) 
                                        (0584) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0585) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0586)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0587)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0588)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0589)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0590)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0591)     M8C_SetBank1
                                        (0592)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0593)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0594)     M8C_SetBank0
                                        (0595)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0596)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0597) .WaitFor2ms:
                                        (0598)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0599)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0600) ENDIF ; SMP is operational
                                        (0601) ENDIF ; 5.0V Operation
                                        (0602) 
                                        (0603)     ;-------------------------------
                                        (0604)     ; Set Power-On Reset (POR) Level
                                        (0605)     ;-------------------------------
                                        (0606) 
                                        (0607)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH,
                                        (0608)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper
                                        (0609)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. These
                                        (0610)     ;  values should not be changed from the settings here. Failure to follow this instruction could 
                                        (0611)     ;  lead to corruption of PSoC flash.
                                        (0612) 
                                        (0613)     M8C_SetBank1
                                        (0614) 
                                        (0615) IF (POWER_SETTING & POWER_SET_5V0)          ; 5.0V Operation?
                                        (0616)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)    ; and Slow Mode?
                                        (0617)  ELSE                                       ;    No, fast mode
                                        (0618)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz ) ;    As fast as 24MHz?
                                        (0619)                                             ;       no, set midpoint POR in user code, if desired
                                        (0620)   ELSE ; 24HMz                              ;
                                        (0621)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
                                        (0622)   ENDIF ; 24MHz
                                        (0623)  ENDIF ; Slow Mode
                                        (0624) ENDIF ; 5.0V Operation
                                        (0625) 
                                        (0626)     M8C_SetBank0
                                        (0627) 
                                        (0628)     ;----------------------------
                                        (0629)     ; Wrap up and invoke "main"
                                        (0630)     ;----------------------------
                                        (0631) 
                                        (0632)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0633)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0634)     ;
012B: 62 E0 00 MOV   REG[0xE0],0x0      (0635)     mov  reg[INT_MSK0],0
012E: 71 10    OR    F,0x10             
                                        (0636) 
                                        (0637)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0638)     ; And put decimator in full mode so it does not consume too much current.
                                        (0639)     ;
                                        (0640)     M8C_SetBank1
0130: 62 E0 00 MOV   REG[0xE0],0x0      (0641)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
0133: 43 E7 80 OR    REG[0xE7],0x80     (0642)     or   reg[DEC_CR2],80h                    ; Put decimator in full mode
0136: 70 EF    AND   F,0xEF             
                                        (0643)     M8C_SetBank0
                                        (0644) 
                                        (0645)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0646)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0647)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0648)     ;
0138: 62 E2 00 MOV   REG[0xE2],0x0      (0649)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0650)                                    ; have been set during the boot process.
                                        (0651) IF	(TOOLCHAIN & HITECH)
                                        (0652) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0653) ELSE
                                        (0654) IF ENABLE_LJMP_TO_MAIN
                                        (0655)     ljmp  _main                    ; goto main (no return)
                                        (0656) ELSE
013B: 7C 06 78 LCALL __UserModules_end|_main|__text_start|_main(0657)     lcall _main                    ; call main
                                        (0658) .Exit:
013E: 8F FF    JMP   0x013E             (0659)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0660) ENDIF
                                        (0661) ENDIF ; TOOLCHAIN
                                        (0662) 
                                        (0663)     ;---------------------------------
                                        (0664)     ; Library Access to Global Parms
                                        (0665)     ;---------------------------------
                                        (0666)     ;
                                        (0667)  bGetPowerSetting:
                                        (0668) _bGetPowerSetting:
                                        (0669)     ; Returns value of POWER_SETTING in the A register.
                                        (0670)     ; No inputs. No Side Effects.
                                        (0671)     ;
0140: 50 10    MOV   A,0x10             (0672)     mov   A, POWER_SETTING
0142: 7F       RET                      (0673)     ret
                                        (0674) 
                                        (0675) IF	(TOOLCHAIN & HITECH)
                                        (0676) ELSE
                                        (0677)     ;---------------------------------
                                        (0678)     ; Order Critical RAM & ROM AREAs
                                        (0679)     ;---------------------------------
                                        (0680)     ;  'TOP' is all that has been defined so far...
                                        (0681) 
                                        (0682)     ;  ROM AREAs for C CONST, static & global items
                                        (0683)     ;
                                        (0684)     AREA lit               (ROM, REL, CON)   ; 'const' definitions
                                        (0685)     AREA idata             (ROM, REL, CON)   ; Constants for initializing RAM
                                        (0686) __idata_start:
                                        (0687) 
                                        (0688)     AREA func_lit          (ROM, REL, CON)   ; Function Pointers
                                        (0689) __func_lit_start:
                                        (0690) 
                                        (0691) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0692)     ; We use the func_lit area to store a pointer to extended initialized
                                        (0693)     ; data (xidata) area that follows the text area. Func_lit isn't
                                        (0694)     ; relocated by the code compressor, but the text area may shrink and
                                        (0695)     ; that moves xidata around.
                                        (0696)     ;
                                        (0697) __pXIData:         word __text_end           ; ptr to extended idata
                                        (0698) ENDIF
                                        (0699) 
                                        (0700)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0701)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0702) 
                                        (0703)     ; CODE segment for general use
                                        (0704)     ;
                                        (0705)     AREA text (ROM, REL, CON)
                                        (0706) __text_start:
                                        (0707) 
                                        (0708)     ; RAM area usage
                                        (0709)     ;
                                        (0710)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0711) __data_start:
                                        (0712) 
                                        (0713)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0714)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0715)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0716) __bss_start:
                                        (0717) 
                                        (0718) ENDIF ; TOOLCHAIN
                                        (0719) 
                                        (0720) ; end of file boot.asm
    0143: 30       HALT  
    0144: 30       HALT  
    0145: 30       HALT  
    0146: 30       HALT  
    0147: 30       HALT  
    0148: 30       HALT  
    0149: 30       HALT  
    014A: 30       HALT  
    014B: 30       HALT  
    014C: 30       HALT  
    014D: 30       HALT  
    014E: 30       HALT  
    014F: 30       HALT  
    0150: 30       HALT  
    0151: 30       HALT  
    0152: 30       HALT  
    0153: 30       HALT  
    0154: 30       HALT  
    0155: 30       HALT  
    0156: 30       HALT  
    0157: 30       HALT  
    0158: 30       HALT  
    0159: 30       HALT  
    015A: 30       HALT  
    015B: 30       HALT  
    015C: 30       HALT  
    015D: 30       HALT  
    015E: 30       HALT  
    015F: 30       HALT  
    0160: 30       HALT  
    0161: 30       HALT  
    0162: 30       HALT  
    0163: 30       HALT  
    0164: 30       HALT  
    0165: 30       HALT  
    0166: 30       HALT  
    0167: 30       HALT  
    0168: 30       HALT  
    0169: 30       HALT  
    016A: 30       HALT  
    016B: 30       HALT  
    016C: 30       HALT  
    016D: 30       HALT  
    016E: 30       HALT  
    016F: 30       HALT  
    0170: 30       HALT  
    0171: 30       HALT  
    0172: 30       HALT  
    0173: 30       HALT  
    0174: 30       HALT  
    0175: 30       HALT  
    0176: 30       HALT  
    0177: 30       HALT  
    0178: 30       HALT  
    0179: 30       HALT  
    017A: 30       HALT  
    017B: 30       HALT  
    017C: 30       HALT  
    017D: 30       HALT  
    017E: 30       HALT  
    017F: 30       HALT  
    0180: 30       HALT  
    0181: 30       HALT  
    0182: 30       HALT  
    0183: 30       HALT  
    0184: 30       HALT  
    0185: 30       HALT  
    0186: 30       HALT  
    0187: 30       HALT  
    0188: 30       HALT  
    0189: 30       HALT  
    018A: 30       HALT  
    018B: 30       HALT  
    018C: 30       HALT  
    018D: 30       HALT  
    018E: 30       HALT  
    018F: 30       HALT  
    0190: 30       HALT  
    0191: 30       HALT  
    0192: 30       HALT  
    0193: 30       HALT  
    0194: 30       HALT  
    0195: 30       HALT  
    0196: 30       HALT  
    0197: 30       HALT  
    0198: 30       HALT  
    0199: 30       HALT  
    019A: 30       HALT  
    019B: 30       HALT  
    019C: 30       HALT  
    019D: 30       HALT  
    019E: 30       HALT  
    019F: 30       HALT  
    01A0: 0D 0A    ADC   [X+10],A
    01A2: 57 65    MOV   X,0x65
    01A4: 6C 63    RLC   [X+99]
    01A6: 6F 6D    RRC   [X+109]
    01A8: 65 20    ASL   [0x20]
    01AA: 74       INC   A
FILE: lib\psocconfigtbl.asm             (0001) ; Generated by PSoC Designer 5.1.2101.0
0267: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) include "m8c.inc"
                                        (0004) ;  Personalization tables 
                                        (0005) export LoadConfigTBL_microprogram405_Bank1
                                        (0006) export LoadConfigTBL_microprogram405_Bank0
                                        (0007) export LoadConfigTBL_microprogram405_Ordered
                                        (0008) AREA lit(rom, rel)
                                        (0009) LoadConfigTBL_microprogram405_Bank0:
                                        (0010) ;  Instance name UART, User Module UART
                                        (0011) ;       Instance name UART, Block Name RX(DCB03)
                                        (0012) 	db		2fh, 00h		;UART_RX_CONTROL_REG(DCB03CR0)
                                        (0013) 	db		2dh, 00h		;UART_(DCB03DR1)
                                        (0014) 	db		2eh, 00h		;UART_RX_BUFFER_REG (DCB03DR2)
                                        (0015) ;       Instance name UART, Block Name TX(DCB02)
                                        (0016) 	db		2bh, 00h		;UART_TX_CONTROL_REG(DCB02CR0)
                                        (0017) 	db		29h, 00h		;UART_TX_BUFFER_REG (DCB02DR1)
                                        (0018) 	db		2ah, 00h		;UART_(DCB02DR2)
                                        (0019) ;  Instance name UART_CLOCK, User Module Counter8
                                        (0020) ;       Instance name UART_CLOCK, Block Name CNTR8(DBB00)
                                        (0021) 	db		23h, 00h		;UART_CLOCK_CONTROL_REG(DBB00CR0)
                                        (0022) 	db		21h, 7ch		;UART_CLOCK_PERIOD_REG(DBB00DR1)
                                        (0023) 	db		22h, 3eh		;UART_CLOCK_COMPARE_REG(DBB00DR2)
                                        (0024) ;  Global Register values Bank 0
                                        (0025) 	db		60h, 28h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0026) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0027) 	db		63h, 05h		; AnalogReferenceControl register (ARF_CR)
                                        (0028) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0029) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0030) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0031) 	db		d6h, 00h		; I2CConfig register (I2C_CFG)
                                        (0032) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0033) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0034) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0035) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0036) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0037) 	db		b5h, 00h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0038) 	db		b6h, 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0039) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0040) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0041) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0042) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0043) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0044) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0045) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0046) 	db		c0h, 00h		; Row_2_InputMux register (RDI2RI)
                                        (0047) 	db		c1h, 00h		; Row_2_InputSync register (RDI2SYN)
                                        (0048) 	db		c2h, 20h		; Row_2_LogicInputAMux register (RDI2IS)
                                        (0049) 	db		c3h, 33h		; Row_2_LogicSelect_0 register (RDI2LT0)
                                        (0050) 	db		c4h, 33h		; Row_2_LogicSelect_1 register (RDI3LT1)
                                        (0051) 	db		c5h, 00h		; Row_2_OutputDrive_0 register (RDI2SRO0)
                                        (0052) 	db		c6h, 00h		; Row_2_OutputDrive_1 register (RDI2SRO1)
                                        (0053) 	db		c8h, 55h		; Row_3_InputMux register (RDI3RI)
                                        (0054) 	db		c9h, 00h		; Row_3_InputSync register (RDI3SYN)
                                        (0055) 	db		cah, 30h		; Row_3_LogicInputAMux register (RDI3IS)
                                        (0056) 	db		cbh, 33h		; Row_3_LogicSelect_0 register (RDI3LT0)
                                        (0057) 	db		cch, 33h		; Row_3_LogicSelect_1 register (RDI3LT1)
                                        (0058) 	db		cdh, 00h		; Row_3_OutputDrive_0 register (RDI3SRO0)
                                        (0059) 	db		ceh, 00h		; Row_3_OutputDrive_1 register (RDI3SRO1)
                                        (0060) 	db		6ch, 00h		; TMP_DR0 register (TMP_DR0)
                                        (0061) 	db		6dh, 00h		; TMP_DR1 register (TMP_DR1)
                                        (0062) 	db		6eh, 00h		; TMP_DR2 register (TMP_DR2)
                                        (0063) 	db		6fh, 00h		; TMP_DR3 register (TMP_DR3)
                                        (0064) 	db		ffh
                                        (0065) LoadConfigTBL_microprogram405_Bank1:
                                        (0066) ;  Instance name UART, User Module UART
                                        (0067) ;       Instance name UART, Block Name RX(DCB03)
                                        (0068) 	db		2ch, 05h		;UART_RX_FUNC_REG   (DCB03FN)
                                        (0069) 	db		2dh, c9h		;UART_RX_INPUT_REG  (DCB03IN)
                                        (0070) 	db		2eh, c0h		;UART_RX_OUTPUT_REG (DCB03OU)
                                        (0071) ;       Instance name UART, Block Name TX(DCB02)
                                        (0072) 	db		28h, 0dh		;UART_TX_FUNC_REG   (DCB02FN)
                                        (0073) 	db		29h, 09h		;UART_TX_INPUT_REG  (DCB02IN)
                                        (0074) 	db		2ah, c4h		;UART_TX_OUTPUT_REG (DCB02OU)
                                        (0075) ;  Instance name UART_CLOCK, User Module Counter8
                                        (0076) ;       Instance name UART_CLOCK, Block Name CNTR8(DBB00)
                                        (0077) 	db		20h, 29h		;UART_CLOCK_FUNC_REG(DBB00FN)
                                        (0078) 	db		21h, 15h		;UART_CLOCK_INPUT_REG(DBB00IN)
                                        (0079) 	db		22h, c5h		;UART_CLOCK_OUTPUT_REG(DBB00OU)
                                        (0080) ;  Global Register values Bank 1
                                        (0081) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0082) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0083) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0084) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0085) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0086) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0087) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0088) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0089) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0090) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0091) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0092) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0093) 	db		e1h, 4fh		; OscillatorControl_1 register (OSC_CR1)
                                        (0094) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0095) 	db		dfh, ffh		; OscillatorControl_3 register (OSC_CR3)
                                        (0096) 	db		deh, 02h		; OscillatorControl_4 register (OSC_CR4)
                                        (0097) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0098) 	db		e7h, 00h		; Type2Decimator_Control register (DEC_CR2)
                                        (0099) 	db		ffh
                                        (0100) AREA psoc_config(rom, rel)
                                        (0101) LoadConfigTBL_microprogram405_Ordered:
                                        (0102) ;  Ordered Global Register values
                                        (0103) 	M8C_SetBank0
0269: 62 00 00 MOV   REG[0x0],0x0       (0104) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
026C: 71 10    OR    F,0x10             
                                        (0105) 	M8C_SetBank1
026E: 62 00 00 MOV   REG[0x0],0x0       (0106) 	mov	reg[00h], 00h		; Port_0_DriveMode_0 register (PRT0DM0)
0271: 62 01 FF MOV   REG[0x1],0xFF      (0107) 	mov	reg[01h], ffh		; Port_0_DriveMode_1 register (PRT0DM1)
0274: 70 EF    AND   F,0xEF             
                                        (0108) 	M8C_SetBank0
0276: 62 03 FF MOV   REG[0x3],0xFF      (0109) 	mov	reg[03h], ffh		; Port_0_DriveMode_2 register (PRT0DM2)
0279: 62 02 00 MOV   REG[0x2],0x0       (0110) 	mov	reg[02h], 00h		; Port_0_GlobalSelect register (PRT0GS)
027C: 71 10    OR    F,0x10             
                                        (0111) 	M8C_SetBank1
027E: 62 02 00 MOV   REG[0x2],0x0       (0112) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
0281: 62 03 00 MOV   REG[0x3],0x0       (0113) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
0284: 70 EF    AND   F,0xEF             
                                        (0114) 	M8C_SetBank0
0286: 62 01 00 MOV   REG[0x1],0x0       (0115) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
0289: 62 04 00 MOV   REG[0x4],0x0       (0116) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
028C: 71 10    OR    F,0x10             
                                        (0117) 	M8C_SetBank1
028E: 62 04 00 MOV   REG[0x4],0x0       (0118) 	mov	reg[04h], 00h		; Port_1_DriveMode_0 register (PRT1DM0)
0291: 62 05 FF MOV   REG[0x5],0xFF      (0119) 	mov	reg[05h], ffh		; Port_1_DriveMode_1 register (PRT1DM1)
0294: 70 EF    AND   F,0xEF             
                                        (0120) 	M8C_SetBank0
0296: 62 07 FF MOV   REG[0x7],0xFF      (0121) 	mov	reg[07h], ffh		; Port_1_DriveMode_2 register (PRT1DM2)
0299: 62 06 00 MOV   REG[0x6],0x0       (0122) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
029C: 71 10    OR    F,0x10             
                                        (0123) 	M8C_SetBank1
029E: 62 06 00 MOV   REG[0x6],0x0       (0124) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
02A1: 62 07 00 MOV   REG[0x7],0x0       (0125) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
02A4: 70 EF    AND   F,0xEF             
                                        (0126) 	M8C_SetBank0
02A6: 62 05 00 MOV   REG[0x5],0x0       (0127) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
02A9: 62 08 00 MOV   REG[0x8],0x0       (0128) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
02AC: 71 10    OR    F,0x10             
                                        (0129) 	M8C_SetBank1
02AE: 62 08 00 MOV   REG[0x8],0x0       (0130) 	mov	reg[08h], 00h		; Port_2_DriveMode_0 register (PRT2DM0)
02B1: 62 09 FF MOV   REG[0x9],0xFF      (0131) 	mov	reg[09h], ffh		; Port_2_DriveMode_1 register (PRT2DM1)
02B4: 70 EF    AND   F,0xEF             
                                        (0132) 	M8C_SetBank0
02B6: 62 0B FF MOV   REG[0xB],0xFF      (0133) 	mov	reg[0bh], ffh		; Port_2_DriveMode_2 register (PRT2DM2)
02B9: 62 0A 00 MOV   REG[0xA],0x0       (0134) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
02BC: 71 10    OR    F,0x10             
                                        (0135) 	M8C_SetBank1
02BE: 62 0A 00 MOV   REG[0xA],0x0       (0136) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
02C1: 62 0B 00 MOV   REG[0xB],0x0       (0137) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
02C4: 70 EF    AND   F,0xEF             
                                        (0138) 	M8C_SetBank0
02C6: 62 09 00 MOV   REG[0x9],0x0       (0139) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
02C9: 62 0C 00 MOV   REG[0xC],0x0       (0140) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
02CC: 71 10    OR    F,0x10             
                                        (0141) 	M8C_SetBank1
02CE: 62 0C 00 MOV   REG[0xC],0x0       (0142) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
02D1: 62 0D 00 MOV   REG[0xD],0x0       (0143) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
02D4: 70 EF    AND   F,0xEF             
                                        (0144) 	M8C_SetBank0
02D6: 62 0F 00 MOV   REG[0xF],0x0       (0145) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
02D9: 62 0E 00 MOV   REG[0xE],0x0       (0146) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
02DC: 71 10    OR    F,0x10             
                                        (0147) 	M8C_SetBank1
02DE: 62 0E 00 MOV   REG[0xE],0x0       (0148) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
02E1: 62 0F 00 MOV   REG[0xF],0x0       (0149) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
02E4: 70 EF    AND   F,0xEF             
                                        (0150) 	M8C_SetBank0
02E6: 62 0D 00 MOV   REG[0xD],0x0       (0151) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
02E9: 62 10 00 MOV   REG[0x10],0x0      (0152) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
02EC: 71 10    OR    F,0x10             
                                        (0153) 	M8C_SetBank1
02EE: 62 10 00 MOV   REG[0x10],0x0      (0154) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
02F1: 62 11 00 MOV   REG[0x11],0x0      (0155) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
02F4: 70 EF    AND   F,0xEF             
                                        (0156) 	M8C_SetBank0
02F6: 62 13 00 MOV   REG[0x13],0x0      (0157) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
02F9: 62 12 00 MOV   REG[0x12],0x0      (0158) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
02FC: 71 10    OR    F,0x10             
                                        (0159) 	M8C_SetBank1
02FE: 62 12 00 MOV   REG[0x12],0x0      (0160) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
0301: 62 13 00 MOV   REG[0x13],0x0      (0161) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
0304: 70 EF    AND   F,0xEF             
                                        (0162) 	M8C_SetBank0
0306: 62 11 00 MOV   REG[0x11],0x0      (0163) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
0309: 62 14 00 MOV   REG[0x14],0x0      (0164) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
030C: 71 10    OR    F,0x10             
                                        (0165) 	M8C_SetBank1
030E: 62 14 00 MOV   REG[0x14],0x0      (0166) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
0311: 62 15 00 MOV   REG[0x15],0x0      (0167) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
0314: 70 EF    AND   F,0xEF             
                                        (0168) 	M8C_SetBank0
0316: 62 17 00 MOV   REG[0x17],0x0      (0169) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
0319: 62 16 00 MOV   REG[0x16],0x0      (0170) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
031C: 71 10    OR    F,0x10             
                                        (0171) 	M8C_SetBank1
031E: 62 16 00 MOV   REG[0x16],0x0      (0172) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
0321: 62 17 00 MOV   REG[0x17],0x0      (0173) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
0324: 70 EF    AND   F,0xEF             
                                        (0174) 	M8C_SetBank0
0326: 62 15 00 MOV   REG[0x15],0x0      (0175) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
0329: 62 18 00 MOV   REG[0x18],0x0      (0176) 	mov	reg[18h], 00h		; Port_6_Data register (PRT6DR)
032C: 71 10    OR    F,0x10             
                                        (0177) 	M8C_SetBank1
032E: 62 18 00 MOV   REG[0x18],0x0      (0178) 	mov	reg[18h], 00h		; Port_6_DriveMode_0 register (PRT6DM0)
0331: 62 19 00 MOV   REG[0x19],0x0      (0179) 	mov	reg[19h], 00h		; Port_6_DriveMode_1 register (PRT6DM1)
0334: 70 EF    AND   F,0xEF             
                                        (0180) 	M8C_SetBank0
0336: 62 1B 00 MOV   REG[0x1B],0x0      (0181) 	mov	reg[1bh], 00h		; Port_6_DriveMode_2 register (PRT6DM2)
0339: 62 1A 00 MOV   REG[0x1A],0x0      (0182) 	mov	reg[1ah], 00h		; Port_6_GlobalSelect register (PRT6GS)
033C: 71 10    OR    F,0x10             
                                        (0183) 	M8C_SetBank1
033E: 62 1A 00 MOV   REG[0x1A],0x0      (0184) 	mov	reg[1ah], 00h		; Port_6_IntCtrl_0 register (PRT6IC0)
0341: 62 1B 00 MOV   REG[0x1B],0x0      (0185) 	mov	reg[1bh], 00h		; Port_6_IntCtrl_1 register (PRT6IC1)
0344: 70 EF    AND   F,0xEF             
                                        (0186) 	M8C_SetBank0
0346: 62 19 00 MOV   REG[0x19],0x0      (0187) 	mov	reg[19h], 00h		; Port_6_IntEn register (PRT6IE)
0349: 62 1C 00 MOV   REG[0x1C],0x0      (0188) 	mov	reg[1ch], 00h		; Port_7_Data register (PRT7DR)
034C: 71 10    OR    F,0x10             
                                        (0189) 	M8C_SetBank1
034E: 62 1C 00 MOV   REG[0x1C],0x0      (0190) 	mov	reg[1ch], 00h		; Port_7_DriveMode_0 register (PRT7DM0)
0351: 62 1D 00 MOV   REG[0x1D],0x0      (0191) 	mov	reg[1dh], 00h		; Port_7_DriveMode_1 register (PRT7DM1)
0354: 70 EF    AND   F,0xEF             
                                        (0192) 	M8C_SetBank0
0356: 62 1F 00 MOV   REG[0x1F],0x0      (0193) 	mov	reg[1fh], 00h		; Port_7_DriveMode_2 register (PRT7DM2)
0359: 62 1E 00 MOV   REG[0x1E],0x0      (0194) 	mov	reg[1eh], 00h		; Port_7_GlobalSelect register (PRT7GS)
035C: 71 10    OR    F,0x10             
                                        (0195) 	M8C_SetBank1
035E: 62 1E 00 MOV   REG[0x1E],0x0      (0196) 	mov	reg[1eh], 00h		; Port_7_IntCtrl_0 register (PRT7IC0)
0361: 62 1F 00 MOV   REG[0x1F],0x0      (0197) 	mov	reg[1fh], 00h		; Port_7_IntCtrl_1 register (PRT7IC1)
0364: 70 EF    AND   F,0xEF             
                                        (0198) 	M8C_SetBank0
0366: 62 1D 00 MOV   REG[0x1D],0x0      (0199) 	mov	reg[1dh], 00h		; Port_7_IntEn register (PRT7IE)
0369: 70 EF    AND   F,0xEF             
                                        (0200) 	M8C_SetBank0
036B: 7F       RET                      (0201) 	ret
                                        (0202) 
                                        (0203) 
                                        (0204) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ; Generated by PSoC Designer 5.1.2101.0
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2010. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_microprogram405
                                        (0026) export _LoadConfig_microprogram405
                                        (0027) 
                                        (0028) export NO_SHADOW
                                        (0029) export _NO_SHADOW
                                        (0030) 
                                        (0031) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0032) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0033) 
                                        (0034) AREA psoc_config(rom, rel)
                                        (0035) 
                                        (0036) ;---------------------------------------------------------------------------
                                        (0037) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0038) ;                  parameters handled by boot code, like CPU speed). This
                                        (0039) ;                  function can be called from user code, but typically it
                                        (0040) ;                  is only called from boot.
                                        (0041) ;
                                        (0042) ;       INPUTS: None.
                                        (0043) ;      RETURNS: Nothing.
                                        (0044) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0045) ;               In the large memory model currently only the page
                                        (0046) ;               pointer registers listed below are modified.  This does
                                        (0047) ;               not guarantee that in future implementations of this
                                        (0048) ;               function other page pointer registers will not be
                                        (0049) ;               modified.
                                        (0050) ;          
                                        (0051) ;               Page Pointer Registers Modified: 
                                        (0052) ;               CUR_PP
                                        (0053) ;
                                        (0054) _LoadConfigInit:
                                        (0055)  LoadConfigInit:
                                        (0056)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0057)     
036C: 7C 03 73 LCALL 0x0373             (0058) 	lcall	LoadConfig_microprogram405
036F: 7C 02 67 LCALL 0x0267             (0059) 	lcall	LoadConfigTBL_microprogram405_Ordered
                                        (0060) 
                                        (0061) 
                                        (0062)     RAM_EPILOGUE RAM_USE_CLASS_4
0372: 7F       RET                      (0063)     ret
                                        (0064) 
                                        (0065) ;---------------------------------------------------------------------------
                                        (0066) ; Load Configuration microprogram405
                                        (0067) ;
                                        (0068) ;    Load configuration registers for microprogram405.
                                        (0069) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0070) ;
                                        (0071) ;       INPUTS: None.
                                        (0072) ;      RETURNS: Nothing.
                                        (0073) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0074) ;               modified as may the Page Pointer registers!
                                        (0075) ;               In the large memory model currently only the page
                                        (0076) ;               pointer registers listed below are modified.  This does
                                        (0077) ;               not guarantee that in future implementations of this
                                        (0078) ;               function other page pointer registers will not be
                                        (0079) ;               modified.
                                        (0080) ;          
                                        (0081) ;               Page Pointer Registers Modified: 
                                        (0082) ;               CUR_PP
                                        (0083) ;
                                        (0084) _LoadConfig_microprogram405:
                                        (0085)  LoadConfig_microprogram405:
                                        (0086)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0087) 
0373: 10       PUSH  X                  (0088) 	push	x
0374: 70 EF    AND   F,0xEF             
                                        (0089)     M8C_SetBank0                    ; Force bank 0
0376: 50 00    MOV   A,0x0              (0090)     mov     a, 0                    ; Specify bank 0
0378: 67       ASR   A                  (0091)     asr     a                       ; Store in carry flag
                                        (0092)                                     ; Load bank 0 table:
0379: 50 01    MOV   A,0x1              (0093)     mov     A, >LoadConfigTBL_microprogram405_Bank0
037B: 57 CD    MOV   X,0xCD             (0094)     mov     X, <LoadConfigTBL_microprogram405_Bank0
037D: 7C 03 8E LCALL 0x038E             (0095)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0096) 
0380: 50 01    MOV   A,0x1              (0097)     mov     a, 1                    ; Specify bank 1
0382: 67       ASR   A                  (0098)     asr     a                       ; Store in carry flag
                                        (0099)                                     ; Load bank 1 table:
0383: 50 02    MOV   A,0x2              (0100)     mov     A, >LoadConfigTBL_microprogram405_Bank1
0385: 57 2E    MOV   X,0x2E             (0101)     mov     X, <LoadConfigTBL_microprogram405_Bank1
0387: 7C 03 8E LCALL 0x038E             (0102)     lcall   LoadConfig              ; Load the bank 1 values
038A: 70 EF    AND   F,0xEF             
                                        (0103) 
                                        (0104)     M8C_SetBank0                    ; Force return to bank 0
038C: 20       POP   X                  (0105) 	pop		x
                                        (0106) 
                                        (0107)     RAM_EPILOGUE RAM_USE_CLASS_4
038D: 7F       RET                      (0108)     ret
                                        (0109) 
                                        (0110) 
                                        (0111) 
                                        (0112) 
                                        (0113) ;---------------------------------------------------------------------------
                                        (0114) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0115) ;              pairs. Terminate on address=0xFF.
                                        (0116) ;
                                        (0117) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0118) ;           Flag Register Carry bit encodes the Register Bank
                                        (0119) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0120) ;
                                        (0121) ;  RETURNS: nothing.
                                        (0122) ;
                                        (0123) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0124) ;                X-3 Temporary store for register address
                                        (0125) ;                X-2 LSB of config table address
                                        (0126) ;                X-1 MSB of config table address
                                        (0127) ;
                                        (0128) LoadConfig:
                                        (0129)     RAM_PROLOGUE RAM_USE_CLASS_2
038E: 38 02    ADD   SP,0x2             (0130)     add     SP, 2                   ; Set up local vars
0390: 10       PUSH  X                  (0131)     push    X                       ; Save config table address on stack
0391: 08       PUSH  A                  (0132)     push    A
0392: 4F       MOV   X,SP               (0133)     mov     X, SP
0393: 56 FC 00 MOV   [X-4],0x0          (0134)     mov     [X-4], 0                ; Set default Destination to Bank 0
0396: D0 04    JNC   0x039B             (0135)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
0398: 56 FC 01 MOV   [X-4],0x1          (0136)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0137) .BankSelectSaved:
039B: 18       POP   A                  (0138)     pop     A
039C: 20       POP   X                  (0139)     pop     X
039D: 70 EF    AND   F,0xEF             
039F: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0140) 
                                        (0141) LoadConfigLp:
                                        (0142)     M8C_SetBank0                    ; Switch to bank 0
                                        (0143)     M8C_ClearWDT                    ; Clear the watchdog for long inits
03A2: 10       PUSH  X                  (0144)     push    X                       ; Preserve the config table address
03A3: 08       PUSH  A                  (0145)     push    A
03A4: 28       ROMX                     (0146)     romx                            ; Load register address from table
03A5: 39 FF    CMP   A,0xFF             (0147)     cmp     A, END_CONFIG_TABLE     ; End of table?
03A7: A0 1F    JZ    0x03C7             (0148)     jz      EndLoadConfig           ;   Yes, go wrap it up
03A9: 4F       MOV   X,SP               (0149)     mov     X, SP                   ;
03AA: 48 FC 01 TST   [X-4],0x1          (0150)     tst     [X-4], 1                ; Loading IO Bank 1?
03AD: A0 03    JZ    0x03B1             (0151)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
03AF: 71 10    OR    F,0x10             
                                        (0152)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0153) .IOBankNowSet:
03B1: 54 FD    MOV   [X-3],A            (0154)     mov     [X-3], A                ; Stash the register address
03B3: 18       POP   A                  (0155)     pop     A                       ; Retrieve the table address
03B4: 20       POP   X                  (0156)     pop     X
03B5: 75       INC   X                  (0157)     inc     X                       ; Advance to the data byte
03B6: 09 00    ADC   A,0x0              (0158)     adc     A, 0
03B8: 10       PUSH  X                  (0159)     push    X                       ; Save the config table address again
03B9: 08       PUSH  A                  (0160)     push    A
03BA: 28       ROMX                     (0161)     romx                            ; load config data from the table
03BB: 4F       MOV   X,SP               (0162)     mov     X, SP                   ; retrieve the register address
03BC: 59 FD    MOV   X,[X-3]            (0163)     mov     X, [X-3]
03BE: 61 00    MOV   REG[X+0x0],A       (0164)     mov     reg[X], A               ; Configure the register
03C0: 18       POP   A                  (0165)     pop     A                       ; retrieve the table address
03C1: 20       POP   X                  (0166)     pop     X
03C2: 75       INC   X                  (0167)     inc     X                       ; advance to next table entry
03C3: 09 00    ADC   A,0x0              (0168)     adc     A, 0
03C5: 8F D7    JMP   0x039D             (0169)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0170) EndLoadConfig:
03C7: 38 FC    ADD   SP,0xFC            (0171)     add     SP, -4
03C9: 70 3F    AND   F,0x3F             
03CB: 71 C0    OR    F,0xC0             
                                        (0172)     RAM_EPILOGUE RAM_USE_CLASS_2
03CD: 7F       RET                      (0173)     ret
                                        (0174) 
                                        (0175) AREA InterruptRAM(ram, rel)
                                        (0176) 
                                        (0177) NO_SHADOW:
                                        (0178) _NO_SHADOW:
FILE: lib\uartint.asm                   (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   UARTINT.asm
                                        (0004) ;;  Version: 5.3, Updated on 2010/12/27 at 15:27:48
                                        (0005) ;;  Generated by PSoC Designer 5.1.2101.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART Interrupt Service Routine.
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2010. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) 
                                        (0014) include "UART.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "m8c.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _UART_TX_ISR
                                        (0022) export  _UART_RX_ISR
                                        (0023) 
                                        (0024) IF (UART_RXBUF_ENABLE)
                                        (0025) export  UART_aRxBuffer
                                        (0026) export _UART_aRxBuffer
                                        (0027) export  UART_bRxCnt
                                        (0028) export _UART_bRxCnt
                                        (0029) export  UART_fStatus
                                        (0030) export _UART_fStatus
                                        (0031) ENDIF
                                        (0032) 
                                        (0033) 
                                        (0034) ;-----------------------------------------------
                                        (0035) ; Variable Allocation
                                        (0036) ;-----------------------------------------------
                                        (0037) AREA InterruptRAM (RAM, REL, CON)
                                        (0038) 
                                        (0039) IF (UART_RXBUF_ENABLE)
                                        (0040)  UART_fStatus:
                                        (0041) _UART_fStatus:      BLK  1
                                        (0042)  UART_bRxCnt:
                                        (0043) _UART_bRxCnt:       BLK  1
                                        (0044) AREA UART_RAM (RAM, REL, CON)
                                        (0045)  UART_aRxBuffer:
                                        (0046) _UART_aRxBuffer:    BLK UART_RX_BUFFER_SIZE
                                        (0047) ENDIF
                                        (0048) 
                                        (0049) AREA InterruptRAM (RAM, REL, CON)
                                        (0050) 
                                        (0051) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0052) ;---------------------------------------------------
                                        (0053) ; Insert your custom declarations below this banner
                                        (0054) ;---------------------------------------------------
                                        (0055) 
                                        (0056) ;------------------------
                                        (0057) ;  Includes
                                        (0058) ;------------------------
                                        (0059) 
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) 
                                        (0071) ;---------------------------------------------------
                                        (0072) ; Insert your custom declarations above this banner
                                        (0073) ;---------------------------------------------------
                                        (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
                                        (0076) 
                                        (0077) AREA UserModules (ROM, REL, CON)
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: _UART_TX_ISR
                                        (0081) ;
                                        (0082) ;  DESCRIPTION:
                                        (0083) ;     UART TX interrupt handler for instance UART.
                                        (0084) ;
                                        (0085) ;     This is a place holder function.  If the user requires use of an interrupt
                                        (0086) ;     handler for this function, then place code where specified.
                                        (0087) ;-----------------------------------------------------------------------------
                                        (0088) 
                                        (0089) _UART_TX_ISR:
                                        (0090)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0091)    ;---------------------------------------------------
                                        (0092)    ; Insert your custom assembly code below this banner
                                        (0093)    ;---------------------------------------------------
                                        (0094)    ;   NOTE: interrupt service routines must preserve
                                        (0095)    ;   the values of the A and X CPU registers.
                                        (0096)    
                                        (0097)    ;---------------------------------------------------
                                        (0098)    ; Insert your custom assembly code above this banner
                                        (0099)    ;---------------------------------------------------
                                        (0100)    
                                        (0101)    ;---------------------------------------------------
                                        (0102)    ; Insert a lcall to a C function below this banner
                                        (0103)    ; and un-comment the lines between these banners
                                        (0104)    ;---------------------------------------------------
                                        (0105)    
                                        (0106)    ;PRESERVE_CPU_CONTEXT
                                        (0107)    ;lcall _My_C_Function
                                        (0108)    ;RESTORE_CPU_CONTEXT
                                        (0109)    
                                        (0110)    ;---------------------------------------------------
                                        (0111)    ; Insert a lcall to a C function above this banner
                                        (0112)    ; and un-comment the lines between these banners
                                        (0113)    ;---------------------------------------------------
                                        (0114)    ;@PSoC_UserCode_END@ (Do not change this line.)
03CE: 7E       RETI                     (0115)    reti
                                        (0116) 
                                        (0117) 
                                        (0118) ;-----------------------------------------------------------------------------
                                        (0119) ;  FUNCTION NAME: _UART_RX_ISR
                                        (0120) ;
                                        (0121) ;  DESCRIPTION:
                                        (0122) ;     UART RX interrupt handler for instance UART.
                                        (0123) ;     This ISR handles the background processing of received characters if
                                        (0124) ;     the buffer is enabled.
                                        (0125) ;
                                        (0126) ;
                                        (0127) ;  The following assumes that the RX buffer feature has been enabled.
                                        (0128) ;
                                        (0129) ;  SIDE EFFECTS:
                                        (0130) ;     There are 3 posible errors that may occur with the serial port.
                                        (0131) ;      1) Parity Error
                                        (0132) ;      2) Framing Error
                                        (0133) ;      3) OverRun Error
                                        (0134) ;
                                        (0135) ;  This user module check for parity and framing error.  If either of these
                                        (0136) ;  two errors are detected, the data is read and ignored.  When an overRun
                                        (0137) ;  error occurs, the last byte was lost, but the current byte is valid.  For
                                        (0138) ;  this reason this error is ignored at this time.  Code could be added to
                                        (0139) ;  this ISR to set a flag if an error condition occurs.
                                        (0140) ;
                                        (0141) ;  THEORY of OPERATION:
                                        (0142) ;     When using the RX buffer feature, the ISR collects received characters
                                        (0143) ;     in a buffer until the user defined command terminator is detected.  After
                                        (0144) ;     the command terminator is detected, the command bit is set and all other
                                        (0145) ;     characters will be ignored until the command bit is reset.  Up to
                                        (0146) ;     buffer_size - 1 characters will be collected waiting for a command
                                        (0147) ;     terminator.  After that, the characters will be discarded, although
                                        (0148) ;     a command determinator will still cause the command bit to be set.
                                        (0149) ;
                                        (0150) ;-----------------------------------------------------------------------------
                                        (0151) _UART_RX_ISR:
                                        (0152) 
                                        (0153)    ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
                                        (0154)    ;---------------------------------------------------
                                        (0155)    ; Insert your custom assembly code below this banner
                                        (0156)    ;---------------------------------------------------
                                        (0157)    ;   NOTE: interrupt service routines must preserve
                                        (0158)    ;   the values of the A and X CPU registers.
                                        (0159)    
                                        (0160)    ;---------------------------------------------------
                                        (0161)    ; Insert your custom assembly code above this banner
                                        (0162)    ;---------------------------------------------------
                                        (0163)    
                                        (0164)    ;---------------------------------------------------
                                        (0165)    ; Insert a lcall to a C function below this banner
                                        (0166)    ; and un-comment the lines between these banners
                                        (0167)    ;---------------------------------------------------
                                        (0168)    
                                        (0169)    ;PRESERVE_CPU_CONTEXT
                                        (0170)    ;lcall _My_C_Function
                                        (0171)    ;RESTORE_CPU_CONTEXT
                                        (0172)    
                                        (0173)    ;---------------------------------------------------
                                        (0174)    ; Insert a lcall to a C function above this banner
                                        (0175)    ; and un-comment the lines between these banners
                                        (0176)    ;---------------------------------------------------
                                        (0177)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0178) 
                                        (0179) IF (UART_RXBUF_ENABLE)
03CF: 08       PUSH  A                  (0180)    push A
03D0: 10       PUSH  X                  (0181)    push X
03D1: 5D D3    MOV   A,REG[0xD3]        
03D3: 08       PUSH  A                  
                                        (0182)    
                                        (0183)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0184)       REG_PRESERVE IDX_PP
                                        (0185)    ENDIF
                                        (0186)    
03D4: 58 01    MOV   X,[0x1]            (0187)    mov  X,[UART_bRxCnt]                                    ; Load X with byte counter
03D6: 5D 2F    MOV   A,REG[0x2F]        (0188)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Read the control register
03D8: 08       PUSH  A                  (0189)    push A                                                  ; Store copy for later test
                                        (0190)                                                            ; IF real RX interrupt
03D9: 21 08    AND   A,0x8              (0191)    and  A,UART_RX_REG_FULL                                 ; Did really really get an IRQ
03DB: B0 04    JNZ   0x03E0             (0192)    jnz  .UARTRX_ReadRx                                     ; Data ready, go get it
03DD: 18       POP   A                  (0193)    pop  A                                                  ; Restore stack
03DE: 80 5E    JMP   0x043D             (0194)    jmp  .RESTORE_IDX_PP
                                        (0195) 
                                        (0196) .UARTRX_ReadRx:
03E0: 18       POP   A                  (0197)    pop  A                                                  ; Restore status flags
                                        (0198)                                                            ; IF there is no error, get data
                                        (0199)                                                            ; Check for parity or framing error
03E1: 21 E0    AND   A,0xE0             (0200)    and  A,UART_RX_ERROR
03E3: A0 12    JZ    0x03F6             (0201)    jz   .UARTRX_NO_ERROR                                   ; If there is not an Error go read data
                                        (0202) 
03E5: 2C 00    OR    [0x0],A            (0203)    or   [UART_fStatus],A                                   ; Set error flags (parity,framing,overrun) bits
03E7: 49 2E 00 TST   REG[0x2E],0x0      (0204)    tst  REG[UART_RX_BUFFER_REG], 0x00                      ; Read the data buffer to clear it.
03EA: 21 20    AND   A,0x20             (0205)    and  A,UART_RX_FRAMING_ERROR                            ; Check for framing error special case
03EC: A0 50    JZ    0x043D             (0206)    jz   .RESTORE_IDX_PP                                    ; Not framing error, all done
                                        (0207) 
                                        (0208)                                                            ; Disable and re-enable RX to reset after
                                        (0209)                                                            ; framing error.
03EE: 41 2F FE AND   REG[0x2F],0xFE     (0210)    and   REG[UART_RX_CONTROL_REG], ~UART_RX_ENABLE         ; Disable RX
03F1: 43 2F 01 OR    REG[0x2F],0x1      (0211)    or    REG[UART_RX_CONTROL_REG],  UART_RX_ENABLE         ; Enable RX
03F4: 80 48    JMP   0x043D             (0212)    jmp  .RESTORE_IDX_PP                                    ; Done with framing error, leave.
                                        (0213) 
                                        (0214) 
                                        (0215) .UARTRX_NO_ERROR:
03F6: 5D 2E    MOV   A,REG[0x2E]        (0216)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read the data buffer
                                        (0217) 
                                        (0218)                                                            ; IF buffer not full
03F8: 47 00 01 TST   [0x0],0x1          (0219)    tst  [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Check for buffer full
03FB: B0 41    JNZ   0x043D             (0220)    jnz  .RESTORE_IDX_PP                                    ; All done
                                        (0221) 
03FD: 39 0D    CMP   A,0xD              (0222)    cmp  A,UART_CMD_TERM                                    ; Check for End of command
03FF: B0 14    JNZ   0x0414             (0223)    jnz  .UARTRX_CHK_BACKSPACE
0401: 2E 00 01 OR    [0x0],0x1          (0224)    or   [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Set command ready bit
0404: 62 D3 00 MOV   REG[0xD3],0x0      
0407: 70 3F    AND   F,0x3F             
0409: 71 80    OR    F,0x80             
                                        (0225) 
                                        (0226) 
                                        (0227) 
                                        (0228)    RAM_SETPAGE_IDX >UART_aRxBuffer
                                        (0229)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
040B: 56 02 00 MOV   [X+2],0x0          (0230)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data
040E: 70 3F    AND   F,0x3F             
0410: 71 00    OR    F,0x0              
                                        (0231)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
0412: 80 2A    JMP   0x043D             (0232)    jmp  .RESTORE_IDX_PP
                                        (0233) 
                                        (0234) .UARTRX_CHK_BACKSPACE:                                     ; 
                                        (0235) IF(UART_BACKSPACE_ENABLE)                                  ; Enable if backspace/delete mode
                                        (0236)    cmp  A,UART_BACKSPACE_ENABLE                            ; Check for backspace character
                                        (0237)    jnz  .UARTRX_IGNORE                                     ; If not, skip the backspace stuff
                                        (0238)    cmp  [UART_bRxCnt],00h                                  ; Check if buffer empty
                                        (0239)    jz   .RESTORE_IDX_PP                                    ; 
                                        (0240)    dec  [UART_bRxCnt]                                      ; Decrement buffer count by one.
                                        (0241)    jmp  .RESTORE_IDX_PP
                                        (0242) ENDIF                                                      ; 
                                        (0243) 
                                        (0244) .UARTRX_IGNORE:
                                        (0245) IF(UART_RX_IGNORE_BELOW)                                   ; Ignore charaters below this value
0414: 39 20    CMP   A,0x20             (0246)    cmp  A,UART_RX_IGNORE_BELOW                             ; If ignore char is set to 0x00, do not
0416: C0 26    JC    0x043D             (0247)    jc   .RESTORE_IDX_PP                                    ; ignore any characters.
0418: 62 D3 00 MOV   REG[0xD3],0x0      
                                        (0248) ENDIF
                                        (0249) 
                                        (0250) .UARTRX_CHK_OVFL:                                          ; Check for MAX String here
                                        (0251) 	
                                        (0252)    RAM_SETPAGE_IDX >UART_aRxBuffer                         ;   using idexed address mode
041B: 3C 01 0F CMP   [0x1],0xF          (0253)    cmp  [UART_bRxCnt],(UART_RX_BUFFER_SIZE - 1)
041E: C0 11    JC    0x0430             (0254)    jc   .UARTRX_ISR_GETDATA
0420: 70 3F    AND   F,0x3F             
0422: 71 80    OR    F,0x80             
                                        (0255)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
0424: 56 02 00 MOV   [X+2],0x0          (0256)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data in the buffer
0427: 70 3F    AND   F,0x3F             
0429: 71 00    OR    F,0x0              
                                        (0257)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
042B: 2E 00 10 OR    [0x0],0x10         (0258)    or   [UART_fStatus],UART_RX_BUF_OVERRUN                 ; Set error flags (parity,framing,overrun) bits
042E: 80 0E    JMP   0x043D             (0259)    jmp  .RESTORE_IDX_PP
0430: 70 3F    AND   F,0x3F             
0432: 71 80    OR    F,0x80             
                                        (0260) 
                                        (0261) .UARTRX_ISR_GETDATA:                                       ; IF input data == "CR", then end of command
                                        (0262)                                                            ; X is already loaded with pointer
                                        (0263)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
0434: 54 02    MOV   [X+2],A            (0264)    mov  [X+UART_aRxBuffer],A                               ; store data in array
0436: 70 3F    AND   F,0x3F             
0438: 71 00    OR    F,0x0              
                                        (0265)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
043A: 75       INC   X                  (0266)    inc  X                                                  ; Inc the pointer
043B: 5A 01    MOV   [0x1],X            (0267)    mov  [UART_bRxCnt],X                                    ; Restore the pointer
043D: 18       POP   A                  
043E: 60 D3    MOV   REG[0xD3],A        
                                        (0268)                                                            ; ENDIF max string size
                                        (0269) .RESTORE_IDX_PP:
                                        (0270)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0271)       REG_RESTORE IDX_PP
                                        (0272)    ENDIF
                                        (0273) 
                                        (0274) .END_UARTRX_ISR:
0440: 20       POP   X                  (0275)    pop  X
0441: 18       POP   A                  (0276)    pop  A
                                        (0277) 
                                        (0278) ENDIF
                                        (0279) 
                                        (0280) UART_RX_ISR_END:
0442: 7E       RETI                     (0281)    reti
                                        (0282) 
                                        (0283) ; end of file UARTINT.asm
                                        (0284) 
FILE: lib\uart_clockint.asm             (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: UART_CLOCKINT.asm
                                        (0004) ;;   Version: 2.60, Updated on 2010/12/27 at 15:27:14
                                        (0005) ;;  Generated by PSoC Designer 5.1.2101.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Counter8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2010. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "UART_CLOCK.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _UART_CLOCK_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _UART_CLOCK_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _UART_CLOCK_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
0443: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file UART_CLOCKINT.asm
FILE: lib\uart_clock.asm                (0001) ;;*****************************************************************************
0444: 43 E1 01 OR    REG[0xE1],0x1      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: UART_CLOCK.asm
                                        (0004) ;;   Version: 2.60, Updated on 2010/12/27 at 15:27:14
                                        (0005) ;;  Generated by PSoC Designer 5.1.2101.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Counter8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2010. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "UART_CLOCK.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  UART_CLOCK_EnableInt
                                        (0030) export _UART_CLOCK_EnableInt
                                        (0031) export  UART_CLOCK_DisableInt
                                        (0032) export _UART_CLOCK_DisableInt
                                        (0033) export  UART_CLOCK_Start
                                        (0034) export _UART_CLOCK_Start
                                        (0035) export  UART_CLOCK_Stop
                                        (0036) export _UART_CLOCK_Stop
                                        (0037) export  UART_CLOCK_WritePeriod
                                        (0038) export _UART_CLOCK_WritePeriod
                                        (0039) export  UART_CLOCK_WriteCompareValue
                                        (0040) export _UART_CLOCK_WriteCompareValue
                                        (0041) export  UART_CLOCK_bReadCompareValue
                                        (0042) export _UART_CLOCK_bReadCompareValue
                                        (0043) export  UART_CLOCK_bReadCounter
                                        (0044) export _UART_CLOCK_bReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  bUART_CLOCK_ReadCompareValue  ; deprecated
                                        (0049) export _bUART_CLOCK_ReadCompareValue  ; deprecated
                                        (0050) export  bUART_CLOCK_ReadCounter       ; deprecated
                                        (0051) export _bUART_CLOCK_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) ;-----------------------------------------------
                                        (0054) ;  Constant Definitions
                                        (0055) ;-----------------------------------------------
                                        (0056) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0057) 
                                        (0058) 
                                        (0059) AREA UserModules (ROM, REL)
                                        (0060) 
                                        (0061) .SECTION
                                        (0062) ;-----------------------------------------------------------------------------
                                        (0063) ;  FUNCTION NAME: UART_CLOCK_EnableInt
                                        (0064) ;
                                        (0065) ;  DESCRIPTION:
                                        (0066) ;     Enables this counter's interrupt by setting the interrupt enable mask bit
                                        (0067) ;     associated with this User Module. This function has no effect until and
                                        (0068) ;     unless the global interrupts are enabled (for example by using the
                                        (0069) ;     macro M8C_EnableGInt).
                                        (0070) ;-----------------------------------------------------------------------------
                                        (0071) ;
                                        (0072) ;  ARGUMENTS:    None.
                                        (0073) ;  RETURNS:      Nothing.
                                        (0074) ;  SIDE EFFECTS: 
                                        (0075) ;    The A and X registers may be modified by this or future implementations
                                        (0076) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0077) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0078) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0079) ;    functions.
                                        (0080) ;
                                        (0081)  UART_CLOCK_EnableInt:
                                        (0082) _UART_CLOCK_EnableInt:
                                        (0083)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0084)    UART_CLOCK_EnableInt_M
                                        (0085)    RAM_EPILOGUE RAM_USE_CLASS_1
0447: 7F       RET                      (0086)    ret
0448: 41 E1 FE AND   REG[0xE1],0xFE     
                                        (0087) 
                                        (0088) .ENDSECTION
                                        (0089) 
                                        (0090) .SECTION
                                        (0091) ;-----------------------------------------------------------------------------
                                        (0092) ;  FUNCTION NAME: UART_CLOCK_DisableInt
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;     Disables this counter's interrupt by clearing the interrupt enable
                                        (0096) ;     mask bit associated with this User Module.
                                        (0097) ;-----------------------------------------------------------------------------
                                        (0098) ;
                                        (0099) ;  ARGUMENTS:    None
                                        (0100) ;  RETURNS:      Nothing
                                        (0101) ;  SIDE EFFECTS: 
                                        (0102) ;    The A and X registers may be modified by this or future implementations
                                        (0103) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0104) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0105) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0106) ;    functions.
                                        (0107) ;
                                        (0108)  UART_CLOCK_DisableInt:
                                        (0109) _UART_CLOCK_DisableInt:
                                        (0110)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0111)    UART_CLOCK_DisableInt_M
                                        (0112)    RAM_EPILOGUE RAM_USE_CLASS_1
044B: 7F       RET                      (0113)    ret
044C: 43 23 01 OR    REG[0x23],0x1      
                                        (0114) 
                                        (0115) 
                                        (0116) .ENDSECTION
                                        (0117) 
                                        (0118) .SECTION
                                        (0119) ;-----------------------------------------------------------------------------
                                        (0120) ;  FUNCTION NAME: UART_CLOCK_Start
                                        (0121) ;
                                        (0122) ;  DESCRIPTION:
                                        (0123) ;     Sets the start bit in the Control register of this user module.  The
                                        (0124) ;     counter will begin counting on the next input clock as soon as the
                                        (0125) ;     enable input is asserted high.
                                        (0126) ;-----------------------------------------------------------------------------
                                        (0127) ;
                                        (0128) ;  ARGUMENTS:    None
                                        (0129) ;  RETURNS:      Nothing
                                        (0130) ;  SIDE EFFECTS: 
                                        (0131) ;    The A and X registers may be modified by this or future implementations
                                        (0132) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0133) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0134) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0135) ;    functions.
                                        (0136) ;
                                        (0137)  UART_CLOCK_Start:
                                        (0138) _UART_CLOCK_Start:
                                        (0139)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0140)    UART_CLOCK_Start_M
                                        (0141)    RAM_EPILOGUE RAM_USE_CLASS_1
044F: 7F       RET                      (0142)    ret
0450: 41 23 FE AND   REG[0x23],0xFE     
                                        (0143) 
                                        (0144) 
                                        (0145) .ENDSECTION
                                        (0146) 
                                        (0147) .SECTION
                                        (0148) ;-----------------------------------------------------------------------------
                                        (0149) ;  FUNCTION NAME: UART_CLOCK_Stop
                                        (0150) ;
                                        (0151) ;  DESCRIPTION:
                                        (0152) ;     Disables counter operation by clearing the start bit in the Control
                                        (0153) ;     register.
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;
                                        (0156) ;  ARGUMENTS:    None
                                        (0157) ;  RETURNS:      Nothing
                                        (0158) ;  SIDE EFFECTS: 
                                        (0159) ;    The A and X registers may be modified by this or future implementations
                                        (0160) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0161) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0162) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0163) ;    functions.
                                        (0164) ;
                                        (0165)  UART_CLOCK_Stop:
                                        (0166) _UART_CLOCK_Stop:
                                        (0167)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0168)    UART_CLOCK_Stop_M
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_1
0453: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) 
                                        (0173) .ENDSECTION
                                        (0174) 
                                        (0175) .SECTION
                                        (0176) ;-----------------------------------------------------------------------------
                                        (0177) ;  FUNCTION NAME: UART_CLOCK_WritePeriod
                                        (0178) ;
                                        (0179) ;  DESCRIPTION:
                                        (0180) ;     Write the 8-bit period value into the Period register (DR1).
                                        (0181) ;-----------------------------------------------------------------------------
                                        (0182) ;
                                        (0183) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0184) ;  RETURNS:   Nothing
                                        (0185) ;  SIDE EFFECTS:
                                        (0186) ;    If the counter user module is stopped, then this value will also be
                                        (0187) ;    latched into the Count register (DR0).
                                        (0188) ;     
                                        (0189) ;    The A and X registers may be modified by this or future implementations
                                        (0190) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0191) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0192) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0193) ;    functions.
                                        (0194) ;
                                        (0195)  UART_CLOCK_WritePeriod:
                                        (0196) _UART_CLOCK_WritePeriod:
                                        (0197)    RAM_PROLOGUE RAM_USE_CLASS_1
0454: 60 21    MOV   REG[0x21],A        (0198)    mov   reg[UART_CLOCK_PERIOD_REG], A
                                        (0199)    RAM_EPILOGUE RAM_USE_CLASS_1
0456: 7F       RET                      (0200)    ret
                                        (0201) 
                                        (0202) 
                                        (0203) .ENDSECTION
                                        (0204) 
                                        (0205) .SECTION
                                        (0206) ;-----------------------------------------------------------------------------
                                        (0207) ;  FUNCTION NAME: UART_CLOCK_WriteCompareValue
                                        (0208) ;
                                        (0209) ;  DESCRIPTION:
                                        (0210) ;     Writes compare value into the Compare register (DR2).
                                        (0211) ;-----------------------------------------------------------------------------
                                        (0212) ;
                                        (0213) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0214) ;  RETURNS:      Nothing
                                        (0215) ;  SIDE EFFECTS: 
                                        (0216) ;    The A and X registers may be modified by this or future implementations
                                        (0217) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0218) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0219) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0220) ;    functions.
                                        (0221) ;
                                        (0222)  UART_CLOCK_WriteCompareValue:
                                        (0223) _UART_CLOCK_WriteCompareValue:
                                        (0224)    RAM_PROLOGUE RAM_USE_CLASS_1
0457: 60 22    MOV   REG[0x22],A        (0225)    mov   reg[UART_CLOCK_COMPARE_REG], A
                                        (0226)    RAM_EPILOGUE RAM_USE_CLASS_1
0459: 7F       RET                      (0227)    ret
                                        (0228) 
                                        (0229) 
                                        (0230) .ENDSECTION
                                        (0231) 
                                        (0232) .SECTION
                                        (0233) ;-----------------------------------------------------------------------------
                                        (0234) ;  FUNCTION NAME: UART_CLOCK_bReadCompareValue
                                        (0235) ;
                                        (0236) ;  DESCRIPTION:
                                        (0237) ;     Reads the Compare register.
                                        (0238) ;-----------------------------------------------------------------------------
                                        (0239) ;
                                        (0240) ;  ARGUMENTS:    None
                                        (0241) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0242) ;  SIDE EFFECTS: 
                                        (0243) ;    The A and X registers may be modified by this or future implementations
                                        (0244) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0245) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0246) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0247) ;    functions.
                                        (0248) ;
                                        (0249)  UART_CLOCK_bReadCompareValue:
                                        (0250) _UART_CLOCK_bReadCompareValue:
                                        (0251)  bUART_CLOCK_ReadCompareValue:                   ; this name deprecated
                                        (0252) _bUART_CLOCK_ReadCompareValue:                   ; this name deprecated
                                        (0253)    RAM_PROLOGUE RAM_USE_CLASS_1
045A: 5D 22    MOV   A,REG[0x22]        (0254)    mov   A, reg[UART_CLOCK_COMPARE_REG]
                                        (0255)    RAM_EPILOGUE RAM_USE_CLASS_1
045C: 7F       RET                      (0256)    ret
                                        (0257) 
                                        (0258) 
                                        (0259) .ENDSECTION
                                        (0260) 
                                        (0261) .SECTION
                                        (0262) ;-----------------------------------------------------------------------------
                                        (0263) ;  FUNCTION NAME: UART_CLOCK_bReadCounter
                                        (0264) ;
                                        (0265) ;  DESCRIPTION:
                                        (0266) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0267) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0268) ;     from the Count to the Compare registers by holding the clock low in
                                        (0269) ;     the PSoC block.
                                        (0270) ;-----------------------------------------------------------------------------
                                        (0271) ;
                                        (0272) ;  ARGUMENTS: None
                                        (0273) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0274) ;  SIDE EFFECTS:
                                        (0275) ;     1) If running, the user module is stopped momentarily and one or more
                                        (0276) ;        counts may be missed.
                                        (0277) ;     2) The A and X registers may be modified by this or future implementations
                                        (0278) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0279) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0280) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0281) ;        functions.
                                        (0282) ;
                                        (0283)  UART_CLOCK_bReadCounter:
                                        (0284) _UART_CLOCK_bReadCounter:
                                        (0285)  bUART_CLOCK_ReadCounter:                        ; this name deprecated
                                        (0286) _bUART_CLOCK_ReadCounter:                        ; this name deprecated
                                        (0287) 
                                        (0288)    bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
                                        (0289)    bOrigControlReg:        EQU   1               ; Frame offset to temp CR0     store
                                        (0290)    bOrigClockSetting:      EQU   2               ; Frame offset to temp Input   store
                                        (0291)    wCounter:               EQU   3               ; Frame offset to temp Count   store
                                        (0292)    STACK_FRAME_SIZE:       EQU   4               ; max stack frame size is 4 bytes
                                        (0293) 
                                        (0294)    RAM_PROLOGUE RAM_USE_CLASS_2
045D: 4F       MOV   X,SP               (0295)    mov   X, SP                                   ; X <- stack frame pointer
045E: 5D 22    MOV   A,REG[0x22]        (0296)    mov   A, reg[UART_CLOCK_COMPARE_REG]          ; Save the Compare register on the stack
0460: 08       PUSH  A                  (0297)    push  A                                       ;
0461: 5D 23    MOV   A,REG[0x23]        (0298)    mov   A, reg[UART_CLOCK_CONTROL_REG]          ; Save CR0 (running or stopped state)
0463: 08       PUSH  A                  (0299)    push  A                                       ;
0464: 41 23 FE AND   REG[0x23],0xFE     
0467: 71 10    OR    F,0x10             
                                        (0300)    UART_CLOCK_Stop_M                             ; Disable (stop) the Counter if running
                                        (0301)    M8C_SetBank1                                  ;
0469: 5D 21    MOV   A,REG[0x21]        (0302)    mov   A, reg[UART_CLOCK_INPUT_REG]            ; save the clock input setting
046B: 08       PUSH  A                  (0303)    push  A                                       ;   on the stack (now 2 bytes) and ...
                                        (0304)                                                  ;   hold the clock low:
046C: 62 21 00 MOV   REG[0x21],0x0      (0305)    mov   reg[UART_CLOCK_INPUT_REG], INPUT_REG_NULL
046F: 70 EF    AND   F,0xEF             
                                        (0306)    M8C_SetBank0
                                        (0307)                                                  ; Extract the Count via DR2 register
0471: 5D 20    MOV   A,REG[0x20]        (0308)    mov   A, reg[UART_CLOCK_COUNTER_REG]          ; DR2 <- DR0
0473: 5D 22    MOV   A,REG[0x22]        (0309)    mov   A, reg[UART_CLOCK_COMPARE_REG]          ; Stash the Count on the stack
0475: 08       PUSH  A                  (0310)    push  A                                       ;  -stack frame is now 3 bytes
0476: 52 00    MOV   A,[X+0]            (0311)    mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
0478: 60 22    MOV   REG[0x22],A        (0312)    mov   reg[UART_CLOCK_COMPARE_REG], A
047A: 71 10    OR    F,0x10             
                                        (0313)    M8C_SetBank1                                  ; Restore the counter operation:
047C: 52 02    MOV   A,[X+2]            (0314)    mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
047E: 60 21    MOV   REG[0x21],A        (0315)    mov   reg[UART_CLOCK_INPUT_REG], A            ;
0480: 70 EF    AND   F,0xEF             
                                        (0316)    M8C_SetBank0                                  ;   then re-enable (start) the counter
0482: 52 01    MOV   A,[X+1]            (0317)    mov   A, [X+bOrigControlReg]                  ;     if it was running when
0484: 60 23    MOV   REG[0x23],A        (0318)    mov   reg[UART_CLOCK_CONTROL_REG], A          ;     this function was first called
0486: 18       POP   A                  (0319)    pop   A                                       ; Setup the return value
0487: 38 FD    ADD   SP,0xFD            (0320)    ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
0489: 70 3F    AND   F,0x3F             
048B: 71 C0    OR    F,0xC0             
                                        (0321)    RAM_EPILOGUE RAM_USE_CLASS_2
048D: 7F       RET                      (0322)    ret
                                        (0323) 
                                        (0324) .ENDSECTION
                                        (0325) 
                                        (0326) ; End of File UART_CLOCK.asm
FILE: lib\uart.asm                      (0001) ;;*****************************************************************************
048E: 43 E1 04 OR    REG[0xE1],0x4      (0002) ;;*****************************************************************************
0491: 43 E1 08 OR    REG[0xE1],0x8      
                                        (0003) ;;  Filename:   UART.asm
                                        (0004) ;;  Version: 5.3, Updated on 2010/12/27 at 15:27:48
                                        (0005) ;;  Generated by PSoC Designer 5.1.2101.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART User Module software implementation file for the
                                        (0008) ;;                22/24/25/26/27xxx families.
                                        (0009) ;;
                                        (0010) ;;
                                        (0011) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0012) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0013) ;;        This means it is the caller's responsibility to preserve any values
                                        (0014) ;;        in the X and A registers that are still needed after the API functions
                                        (0015) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0016) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0017) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0018) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0019) ;;-----------------------------------------------------------------------------
                                        (0020) ;;  Copyright (c) Cypress Semiconductor 2010. All Rights Reserved.
                                        (0021) ;;*****************************************************************************
                                        (0022) ;;*****************************************************************************
                                        (0023) 
                                        (0024) 
                                        (0025) include "m8c.inc"
                                        (0026) include "memory.inc"
                                        (0027) include "UART.inc"
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ;  Global Symbols
                                        (0031) ;-----------------------------------------------
                                        (0032) ;-------------------------------------------------------------------
                                        (0033) ;  Declare the functions global for both assembler and C compiler.
                                        (0034) ;
                                        (0035) ;  Note that there are two names for each API. First name is
                                        (0036) ;  assembler reference. Name with underscore is name refence for
                                        (0037) ;  C compiler.  Calling function in C source code does not require
                                        (0038) ;  the underscore.
                                        (0039) ;-------------------------------------------------------------------
                                        (0040) export  UART_SetTxIntMode
                                        (0041) export _UART_SetTxIntMode
                                        (0042) export  UART_EnableInt
                                        (0043) export _UART_EnableInt
                                        (0044) export  UART_DisableInt
                                        (0045) export _UART_DisableInt
                                        (0046) 
                                        (0047) export  UART_Start
                                        (0048) export _UART_Start
                                        (0049) export  UART_Stop
                                        (0050) export _UART_Stop
                                        (0051) export  UART_SendData
                                        (0052) export _UART_SendData
                                        (0053) export  UART_bReadTxStatus
                                        (0054) export _UART_bReadTxStatus
                                        (0055) export  UART_bReadRxData
                                        (0056) export _UART_bReadRxData
                                        (0057) export  UART_bReadRxStatus
                                        (0058) export _UART_bReadRxStatus
                                        (0059) 
                                        (0060) export  UART_IntCntl
                                        (0061) export _UART_IntCntl
                                        (0062) 
                                        (0063) export  UART_TxIntMode
                                        (0064) export _UART_TxIntMode
                                        (0065) 
                                        (0066) export  UART_PutSHexByte
                                        (0067) export _UART_PutSHexByte
                                        (0068) export  UART_PutSHexInt
                                        (0069) export _UART_PutSHexInt
                                        (0070) 
                                        (0071) export  UART_CPutString
                                        (0072) export _UART_CPutString
                                        (0073) export  UART_PutString
                                        (0074) export _UART_PutString
                                        (0075) export  UART_PutChar
                                        (0076) export _UART_PutChar
                                        (0077) export  UART_Write
                                        (0078) export _UART_Write
                                        (0079) export  UART_CWrite
                                        (0080) export _UART_CWrite
                                        (0081) 
                                        (0082) export  UART_cGetChar
                                        (0083) export _UART_cGetChar
                                        (0084) export  UART_cReadChar
                                        (0085) export _UART_cReadChar
                                        (0086) export  UART_iReadChar
                                        (0087) export _UART_iReadChar
                                        (0088) export  UART_PutCRLF
                                        (0089) export _UART_PutCRLF
                                        (0090) 
                                        (0091) IF (UART_RXBUF_ENABLE)
                                        (0092) export  UART_CmdReset
                                        (0093) export _UART_CmdReset
                                        (0094) export  UART_bCmdCheck
                                        (0095) export _UART_bCmdCheck
                                        (0096) export  UART_bCmdLength
                                        (0097) export _UART_bCmdLength
                                        (0098) export  UART_bErrCheck
                                        (0099) export _UART_bErrCheck
                                        (0100) 
                                        (0101) export  UART_szGetParam
                                        (0102) export _UART_szGetParam
                                        (0103) export  UART_szGetRestOfParams
                                        (0104) export _UART_szGetRestOfParams
                                        (0105) ENDIF
                                        (0106) 
                                        (0107) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0108) ; WARNING WARNING WARNING
                                        (0109) ; The following exports are for backwards compatibility only and should
                                        (0110) ; not be used for new designs. They may be eliminated in a future release.
                                        (0111) ; Their status is "NO FURTHER MAINTENANCE". 
                                        (0112) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0113) export  bUART_ReadTxStatus
                                        (0114) export _bUART_ReadTxStatus
                                        (0115) export  bUART_ReadRxData
                                        (0116) export _bUART_ReadRxData
                                        (0117) export  bUART_ReadRxStatus
                                        (0118) export _bUART_ReadRxStatus
                                        (0119) 	
                                        (0120) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0121) ;             END WARNING
                                        (0122) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0123) 
                                        (0124) ;-----------------------------------------------
                                        (0125) ; Variable Allocation
                                        (0126) ;-----------------------------------------------
                                        (0127) IF (UART_RXBUF_ENABLE)
                                        (0128)     
                                        (0129) area UART_RAM (RAM, REL, CON)
                                        (0130)     
                                        (0131)  ptrParam:   BLK  1
                                        (0132) 
                                        (0133) ENDIF
                                        (0134) 
                                        (0135) area text (ROM,REL)
                                        (0136) 
                                        (0137) ;-----------------------------------------------
                                        (0138) ;  EQUATES
                                        (0139) ;-----------------------------------------------
                                        (0140) bfCONTROL_REG_START_BIT:        equ    1    ; Control register start bit
                                        (0141) bfFUNCTION_REG_TX_INT_MODE_BIT: equ 0x10    ; the TX Int Mode bit
                                        (0142) 
                                        (0143) area UserModules (ROM, REL, CON)
                                        (0144) 
                                        (0145) ;=============================================================================
                                        (0146) ;=============================================================================
                                        (0147) ;
                                        (0148) ;     Low-Level Commands
                                        (0149) ;
                                        (0150) ;=============================================================================
                                        (0151) ;=============================================================================
                                        (0152) 
                                        (0153) .SECTION
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;  FUNCTION NAME: UART_EnableInt
                                        (0156) ;
                                        (0157) ;  DESCRIPTION:
                                        (0158) ;     Enables this UART's interrupt by setting the interrupt enable mask
                                        (0159) ;     bit associated with this User Module. Remember to call the global
                                        (0160) ;     interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0161) ;-----------------------------------------------------------------------------
                                        (0162) ;
                                        (0163) ;  ARGUMENTS:
                                        (0164) ;     none.
                                        (0165) ;
                                        (0166) ;  RETURNS:
                                        (0167) ;     none.
                                        (0168) ;
                                        (0169) ;  SIDE EFFECTS:
                                        (0170) ;    The A and X registers may be modified by this or future implementations
                                        (0171) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0172) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0173) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0174) ;    functions.
                                        (0175) ;
                                        (0176)  UART_EnableInt:
                                        (0177) _UART_EnableInt:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0179)    M8C_EnableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0180)    M8C_EnableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0181)    RAM_EPILOGUE RAM_USE_CLASS_1
0494: 7F       RET                      (0182)    ret
0495: 41 E1 FB AND   REG[0xE1],0xFB     
0498: 41 E1 F7 AND   REG[0xE1],0xF7     
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185)     
                                        (0186) .SECTION
                                        (0187) ;-----------------------------------------------------------------------------
                                        (0188) ;  FUNCTION NAME: UART_DisableInt
                                        (0189) ;
                                        (0190) ;  DESCRIPTION:
                                        (0191) ;     Disables this UART's interrupt by clearing the interrupt enable mask bit
                                        (0192) ;     associated with this User Module.
                                        (0193) ;-----------------------------------------------------------------------------
                                        (0194) ;
                                        (0195) ;  ARGUMENTS:
                                        (0196) ;     none.
                                        (0197) ;
                                        (0198) ;  RETURNS:
                                        (0199) ;     none.
                                        (0200) ;
                                        (0201) ;  SIDE EFFECTS:
                                        (0202) ;    The A and X registers may be modified by this or future implementations
                                        (0203) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0204) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0205) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0206) ;    functions.
                                        (0207) ;
                                        (0208)  UART_DisableInt:
                                        (0209) _UART_DisableInt:
                                        (0210)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0211)    M8C_DisableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0212)    M8C_DisableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0213)    RAM_EPILOGUE RAM_USE_CLASS_1
049B: 7F       RET                      (0214)    ret
049C: 71 10    OR    F,0x10             
                                        (0215) .ENDSECTION
                                        (0216) 
                                        (0217) 
                                        (0218) .SECTION
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;  FUNCTION NAME: UART_SetTxIntMode(BYTE bTxIntMode)
                                        (0221) ;
                                        (0222) ;  DESCRIPTION:
                                        (0223) ;     Sets the Tx Interrupt Mode bit in the Function Register.
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;
                                        (0226) ;  ARGUMENTS:
                                        (0227) ;     BYTE bTxIntMode - The TX Interrupt mode setting. Use defined masks.
                                        (0228) ;        Passed in the A register
                                        (0229) ;
                                        (0230) ;  RETURNS:
                                        (0231) ;     none.
                                        (0232) ;
                                        (0233) ;  SIDE EFFECTS:
                                        (0234) ;    The A and X registers may be modified by this or future implementations
                                        (0235) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0236) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0237) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0238) ;    functions.
                                        (0239) ;
                                        (0240) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0241) ;     Sets the TX interrupt mode bit to define whether the interrupt occurs
                                        (0242) ;     on TX register empty or TX transmit complete
                                        (0243) ;
                                        (0244)  UART_SetTxIntMode:
                                        (0245) _UART_SetTxIntMode:
                                        (0246)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0247)    M8C_SetBank1
049E: 21 01    AND   A,0x1              (0248)    and   A, UART_INT_MODE_TX_COMPLETE
04A0: A0 07    JZ    0x04A8             (0249)    jz    .SetModeRegEmpty
04A2: 43 28 10 OR    REG[0x28],0x10     (0250)    or    REG[UART_TX_FUNC_REG], bfFUNCTION_REG_TX_INT_MODE_BIT
04A5: 70 EF    AND   F,0xEF             
                                        (0251)    M8C_SetBank0
                                        (0252)    RAM_EPILOGUE RAM_USE_CLASS_1
04A7: 7F       RET                      (0253)    ret
                                        (0254) 
                                        (0255) .SetModeRegEmpty:
04A8: 41 28 EF AND   REG[0x28],0xEF     (0256)    and   REG[UART_TX_FUNC_REG], ~bfFUNCTION_REG_TX_INT_MODE_BIT
04AB: 70 EF    AND   F,0xEF             
                                        (0257)    M8C_SetBank0
                                        (0258)    RAM_EPILOGUE RAM_USE_CLASS_1
04AD: 7F       RET                      (0259)    ret
                                        (0260) .ENDSECTION
                                        (0261) 
                                        (0262) 
                                        (0263) .SECTION
                                        (0264) ;-----------------------------------------------------------------------------
                                        (0265) ;  FUNCTION NAME: UART_Start(BYTE bParity)
                                        (0266) ;
                                        (0267) ;  DESCRIPTION:
                                        (0268) ;     Sets the start bit and parity in the Control register of this user module.
                                        (0269) ;-----------------------------------------------------------------------------
                                        (0270) ;
                                        (0271) ;  ARGUMENTS:
                                        (0272) ;     BYTE bParity - parity setting for the Transmitter and receiver. Use defined masks.
                                        (0273) ;        Passed in the A register.
                                        (0274) ;
                                        (0275) ;  RETURNS:
                                        (0276) ;     none.
                                        (0277) ;
                                        (0278) ;  SIDE EFFECTS:
                                        (0279) ;    The A and X registers may be modified by this or future implementations
                                        (0280) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0281) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0282) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0283) ;    functions.
                                        (0284) ;
                                        (0285)  UART_Start:
                                        (0286) _UART_Start:
                                        (0287)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0288)    ; Note, Proxy Class 4 only if receive buffer used; otherwise Proxy Class 1.
                                        (0289) 
04AE: 29 01    OR    A,0x1              (0290)    or    A, bfCONTROL_REG_START_BIT
04B0: 60 2B    MOV   REG[0x2B],A        (0291)    mov   REG[UART_TX_CONTROL_REG], A
04B2: 60 2F    MOV   REG[0x2F],A        (0292)    mov   REG[UART_RX_CONTROL_REG], A
                                        (0293) IF ( UART_RXBUF_ENABLE )
04B4: 91 2A    CALL  _UART_CmdReset     (0294)    call  _UART_CmdReset
                                        (0295) ENDIF
                                        (0296)    RAM_EPILOGUE RAM_USE_CLASS_1
04B6: 7F       RET                      (0297)    ret
                                        (0298) .ENDSECTION
                                        (0299) 
                                        (0300) 
                                        (0301) .SECTION
                                        (0302) ;-----------------------------------------------------------------------------
                                        (0303) ;  FUNCTION NAME: UART_Stop
                                        (0304) ;
                                        (0305) ;  DESCRIPTION:
                                        (0306) ;     Disables UART operation.
                                        (0307) ;-----------------------------------------------------------------------------
                                        (0308) ;
                                        (0309) ;  ARGUMENTS:
                                        (0310) ;     none.
                                        (0311) ;
                                        (0312) ;  RETURNS:
                                        (0313) ;     none.
                                        (0314) ;
                                        (0315) ;  SIDE EFFECTS:
                                        (0316) ;    The A and X registers may be modified by this or future implementations
                                        (0317) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0318) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0319) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0320) ;    functions.
                                        (0321) ;
                                        (0322)  UART_Stop:
                                        (0323) _UART_Stop:
                                        (0324)    RAM_PROLOGUE RAM_USE_CLASS_1
04B7: 41 2B FE AND   REG[0x2B],0xFE     (0325)    and   REG[UART_TX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
04BA: 41 2F FE AND   REG[0x2F],0xFE     (0326)    and   REG[UART_RX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                        (0327)    RAM_EPILOGUE RAM_USE_CLASS_1
04BD: 7F       RET                      (0328)    ret
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) 
                                        (0332) .SECTION
                                        (0333) ;-----------------------------------------------------------------------------
                                        (0334) ;  FUNCTION NAME: UART_SendData
                                        (0335) ;
                                        (0336) ;  DESCRIPTION:
                                        (0337) ;     Initiates a transmission of data.
                                        (0338) ;-----------------------------------------------------------------------------
                                        (0339) ;
                                        (0340) ;  ARGUMENTS:
                                        (0341) ;     BYTE  TxData - data to transmit. PASSED in A register.
                                        (0342) ;
                                        (0343) ;  RETURNS:
                                        (0344) ;     none.
                                        (0345) ;
                                        (0346) ;  SIDE EFFECTS:
                                        (0347) ;    The A and X registers may be modified by this or future implementations
                                        (0348) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0349) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0350) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0351) ;    functions.
                                        (0352) ;
                                        (0353)  UART_SendData:
                                        (0354) _UART_SendData:
                                        (0355)    RAM_PROLOGUE RAM_USE_CLASS_1
04BE: 60 29    MOV   REG[0x29],A        (0356)    mov REG[UART_TX_BUFFER_REG], A
                                        (0357)    RAM_EPILOGUE RAM_USE_CLASS_1
04C0: 7F       RET                      (0358)    ret
                                        (0359) .ENDSECTION
                                        (0360) 
                                        (0361) 
                                        (0362) .SECTION
                                        (0363) ;-----------------------------------------------------------------------------
                                        (0364) ;  FUNCTION NAME: UART_bReadTxStatus
                                        (0365) ;
                                        (0366) ;  DESCRIPTION:
                                        (0367) ;     Reads the Tx Status bits in the Control/Status register.
                                        (0368) ;-----------------------------------------------------------------------------
                                        (0369) ;
                                        (0370) ;  ARGUMENTS:
                                        (0371) ;     none.
                                        (0372) ;
                                        (0373) ;  RETURNS:
                                        (0374) ;     BYTE  bTxStatus - transmit status data.  Use defined masks for detecting
                                        (0375) ;           status bits (returned in A)
                                        (0376) ;
                                        (0377) ;  SIDE EFFECTS:
                                        (0378) ;    The A and X registers may be modified by this or future implementations
                                        (0379) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0380) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0381) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0382) ;    functions.
                                        (0383) ;
                                        (0384)  UART_bReadTxStatus:
                                        (0385) _UART_bReadTxStatus:
                                        (0386)  bUART_ReadTxStatus:                             ; For backwards compatibility only
                                        (0387) _bUART_ReadTxStatus:                             ; For backwards compatibility only
                                        (0388)    RAM_PROLOGUE RAM_USE_CLASS_1
04C1: 5D 2B    MOV   A,REG[0x2B]        (0389)    mov A,  REG[UART_TX_CONTROL_REG]
                                        (0390)    RAM_EPILOGUE RAM_USE_CLASS_1
04C3: 7F       RET                      (0391)    ret
                                        (0392) .ENDSECTION
                                        (0393) 
                                        (0394) 
                                        (0395) .SECTION
                                        (0396) ;-----------------------------------------------------------------------------
                                        (0397) ;  FUNCTION NAME: UART_bReadRxData
                                        (0398) ;
                                        (0399) ;  DESCRIPTION:
                                        (0400) ;     Reads the RX buffer register.  Should check the status regiser to make
                                        (0401) ;     sure data is valid.
                                        (0402) ;-----------------------------------------------------------------------------
                                        (0403) ;
                                        (0404) ;  ARGUMENTS:
                                        (0405) ;     none.
                                        (0406) ;
                                        (0407) ;  RETURNS:
                                        (0408) ;     bRxData - returned in A.
                                        (0409) ;
                                        (0410) ;  SIDE EFFECTS:
                                        (0411) ;    The A and X registers may be modified by this or future implementations
                                        (0412) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0413) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0414) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0415) ;    functions.
                                        (0416) ;
                                        (0417)  UART_bReadRxData:
                                        (0418) _UART_bReadRxData:
                                        (0419)  bUART_ReadRxData:                               ; For backwards compatibility only
                                        (0420) _bUART_ReadRxData:                               ; For backwards compatibility only
                                        (0421)    RAM_PROLOGUE RAM_USE_CLASS_1
04C4: 5D 2E    MOV   A,REG[0x2E]        (0422)    mov A, REG[UART_RX_BUFFER_REG]
                                        (0423)    RAM_EPILOGUE RAM_USE_CLASS_1
04C6: 7F       RET                      (0424)    ret
                                        (0425) .ENDSECTION
                                        (0426) 
                                        (0427) 
                                        (0428) .SECTION
                                        (0429) ;-----------------------------------------------------------------------------
                                        (0430) ;  FUNCTION NAME: UART_bReadRxStatus
                                        (0431) ;
                                        (0432) ;  DESCRIPTION:
                                        (0433) ;     Reads the RX Status bits in the Control/Status register.
                                        (0434) ;-----------------------------------------------------------------------------
                                        (0435) ;
                                        (0436) ;  ARGUMENTS:
                                        (0437) ;     none.
                                        (0438) ;
                                        (0439) ;  RETURNS:
                                        (0440) ;     BYTE  bRXStatus - receive status data.  Use the following defined bits
                                        (0441) ;                       masks: RX_COMPLETE and RX_BUFFER_EMPTY
                                        (0442) ;           returned in A.
                                        (0443) ;
                                        (0444) ;  SIDE EFFECTS:
                                        (0445) ;    The A and X registers may be modified by this or future implementations
                                        (0446) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0447) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0448) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0449) ;    functions.
                                        (0450) ;
                                        (0451)  UART_bReadRxStatus:
                                        (0452) _UART_bReadRxStatus:
                                        (0453)  bUART_ReadRxStatus:                             ; For backwards compatibility only
                                        (0454) _bUART_ReadRxStatus:                             ; For backwards compatibility only
                                        (0455)    RAM_PROLOGUE RAM_USE_CLASS_1
04C7: 5D 2F    MOV   A,REG[0x2F]        (0456)    mov A,  REG[UART_RX_CONTROL_REG]
                                        (0457)    RAM_EPILOGUE RAM_USE_CLASS_1
04C9: 7F       RET                      (0458)    ret
                                        (0459) .ENDSECTION
                                        (0460) 
                                        (0461) 
                                        (0462) .SECTION
                                        (0463) ;-----------------------------------------------------------------------------
                                        (0464) ;  FUNCTION NAME: UART_TxIntMode
                                        (0465) ;
                                        (0466) ;  DESCRIPTION:
                                        (0467) ;     This function is used to change the TX Interrupt mode.
                                        (0468) ;-----------------------------------------------------------------------------
                                        (0469) ;
                                        (0470) ;  ARGUMENTS:
                                        (0471) ;     A => Tx Interrupt mode
                                        (0472) ;             0 => Interrupt on TX_Reg_Empty  (Default)
                                        (0473) ;             1 => Interrupt on TX Complete
                                        (0474) ;
                                        (0475) ;  RETURNS:
                                        (0476) ;     none.
                                        (0477) ;
                                        (0478) ;  SIDE EFFECTS:
                                        (0479) ;    The A and X registers may be modified by this or future implementations
                                        (0480) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0481) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0482) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0483) ;    functions.
                                        (0484) ;
                                        (0485)  UART_TxIntMode:
                                        (0486) _UART_TxIntMode:
                                        (0487)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0488) 
04CA: 21 01    AND   A,0x1              (0489)    and  A,UART_INT_MODE_TX_COMPLETE
04CC: 71 10    OR    F,0x10             
                                        (0490)    M8C_SetBank1
04CE: 39 01    CMP   A,0x1              (0491)    cmp  A,UART_INT_MODE_TX_COMPLETE
04D0: A0 06    JZ    0x04D7             (0492)    jz   .SetTxCmpMode
                                        (0493) 
04D2: 41 28 EF AND   REG[0x28],0xEF     (0494)    and  reg[UART_TX_FUNC_REG],0xEF               ; Set Interrupt on Tx_Reg_Empty
04D5: 80 04    JMP   0x04DA             (0495)    jmp  .TxIntMode_End
                                        (0496) 
                                        (0497) .SetTxCmpMode:                                       ; Set Interrupt on TX Complete
04D7: 43 28 10 OR    REG[0x28],0x10     (0498)    or   reg[UART_TX_FUNC_REG],0x10
04DA: 70 EF    AND   F,0xEF             
                                        (0499) 
                                        (0500) .TxIntMode_End:
                                        (0501)    M8C_SetBank0
                                        (0502)    RAM_EPILOGUE RAM_USE_CLASS_1
04DC: 7F       RET                      (0503)    ret
                                        (0504) .ENDSECTION
                                        (0505) 
                                        (0506)     
                                        (0507) .SECTION
                                        (0508) ;-----------------------------------------------------------------------------
                                        (0509) ;  FUNCTION NAME: UART_IntCntl
                                        (0510) ;
                                        (0511) ;  DESCRIPTION:
                                        (0512) ;     This function is used to enable/disable the Rx and Tx interrupt.
                                        (0513) ;-----------------------------------------------------------------------------
                                        (0514) ;
                                        (0515) ;  ARGUMENTS:
                                        (0516) ;     A => Interrupt mask
                                        (0517) ;
                                        (0518) ;  RETURNS:
                                        (0519) ;     none.
                                        (0520) ;
                                        (0521) ;  SIDE EFFECTS:
                                        (0522) ;    The A and X registers may be modified by this or future implementations
                                        (0523) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0524) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0525) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0526) ;    functions.
                                        (0527) ;
                                        (0528) ;  THEORY of OPERATION or PROCEDURE:
                                        (0529) ;     Set or Clears the Tx/Rx user module interrupt enable mask bit in the TX
                                        (0530) ;     and RX block.
                                        (0531) ;
                                        (0532)  UART_IntCntl:
                                        (0533) _UART_IntCntl:
                                        (0534)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0535) 
04DD: 08       PUSH  A                  (0536)    push A
04DE: 21 01    AND   A,0x1              (0537)    and  A,UART_ENABLE_RX_INT
04E0: A0 06    JZ    0x04E7             (0538)    jz   .DisRxInt
04E2: 43 E1 08 OR    REG[0xE1],0x8      
                                        (0539)      ; Enable Rx Interrupt
                                        (0540)    M8C_EnableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
04E5: 80 04    JMP   0x04EA             (0541)    jmp  .CheckTxInt
04E7: 41 E1 F7 AND   REG[0xE1],0xF7     
                                        (0542) .DisRxInt:
                                        (0543)      ; Disable Rx Interrupt
                                        (0544)    M8C_DisableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0545) 
                                        (0546) .CheckTxInt:
04EA: 18       POP   A                  (0547)    pop  A
04EB: 21 02    AND   A,0x2              (0548)    and  A,UART_ENABLE_TX_INT
04ED: A0 06    JZ    0x04F4             (0549)    jz   .DisTxInt
04EF: 43 E1 04 OR    REG[0xE1],0x4      
                                        (0550)      ; Enable Tx Interrupt
                                        (0551)    M8C_EnableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
04F2: 80 04    JMP   0x04F7             (0552)    jmp  .End_IntCntl
04F4: 41 E1 FB AND   REG[0xE1],0xFB     
                                        (0553) .DisTxInt:
                                        (0554)      ; Disable Tx Interrupt
                                        (0555)    M8C_DisableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0556) 
                                        (0557) .End_IntCntl:
                                        (0558)    RAM_EPILOGUE RAM_USE_CLASS_1
04F7: 7F       RET                      (0559)    ret
                                        (0560) .ENDSECTION
                                        (0561) 
                                        (0562) 
                                        (0563) ;=============================================================================
                                        (0564) ;=============================================================================
                                        (0565) ;
                                        (0566) ;     High-Level Commands
                                        (0567) ;
                                        (0568) ;=============================================================================
                                        (0569) ;=============================================================================
                                        (0570) 
                                        (0571) 
                                        (0572) ;-----------------------------------------------------------------------------
                                        (0573) ;  FUNCTION NAME: UART_PutSHexByte
                                        (0574) ;
                                        (0575) ;  DESCRIPTION:
                                        (0576) ;     Print a byte in Hex (two characters) to the UART Tx
                                        (0577) ;-----------------------------------------------------------------------------
                                        (0578) ;
                                        (0579) ;  ARGUMENTS:
                                        (0580) ;     A  => (BYTE) Data/char to be printed
                                        (0581) ;
                                        (0582) ;  RETURNS:
                                        (0583) ;     none.
                                        (0584) ;
                                        (0585) ;  SIDE EFFECTS:
                                        (0586) ;    The A and X registers may be modified by this or future implementations
                                        (0587) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0588) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0589) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0590) ;    functions.
                                        (0591) ;
                                        (0592) .LITERAL
                                        (0593) UART_HEX_STR:
                                        (0594)      DS    "0123456789ABCDEF"
                                        (0595) .ENDLITERAL
                                        (0596) 
                                        (0597) .SECTION
                                        (0598)  UART_PutSHexByte:
                                        (0599) _UART_PutSHexByte:
                                        (0600)    RAM_PROLOGUE RAM_USE_CLASS_1
0508: 08       PUSH  A                  (0601)    push  A                             ; Save lower nibble
0509: 67       ASR   A                  (0602)    asr   A                             ; Shift high nibble to right
050A: 67       ASR   A                  (0603)    asr   A
050B: 67       ASR   A                  (0604)    asr   A
050C: 67       ASR   A                  (0605)    asr   A
050D: 21 0F    AND   A,0xF              (0606)    and   A,0Fh                         ; Mask off nibble
050F: FF E7    INDEX 0x04F8             (0607)    index UART_HEX_STR                  ; Get Hex value
0511: 90 0F    CALL  _UART_PutChar      (0608)    call  UART_PutChar                  ; Write data to screen
0513: 18       POP   A                  (0609)    pop   A                             ; Restore value
0514: 21 0F    AND   A,0xF              (0610)    and   A,0Fh                         ; Mask off lower nibble
0516: FF E0    INDEX 0x04F8             (0611)    index UART_HEX_STR                  ; Get Hex value
0518: 90 08    CALL  _UART_PutChar      (0612)    call  UART_PutChar                  ; Write data to screen
                                        (0613)    RAM_EPILOGUE RAM_USE_CLASS_1
051A: 7F       RET                      (0614)    ret
                                        (0615) .ENDSECTION
                                        (0616) 
                                        (0617) 
                                        (0618) .SECTION
                                        (0619) ;-----------------------------------------------------------------------------
                                        (0620) ;  FUNCTION NAME: UART_PutSHexInt
                                        (0621) ;
                                        (0622) ;  DESCRIPTION:
                                        (0623) ;     Print an Int in Hex (four characters) to UART Tx
                                        (0624) ;-----------------------------------------------------------------------------
                                        (0625) ;
                                        (0626) ;  ARGUMENTS:
                                        (0627) ;     Pointer to string
                                        (0628) ;     A  => ASB of Int
                                        (0629) ;     X  => MSB of Int
                                        (0630) ;
                                        (0631) ;  RETURNS:
                                        (0632) ;     none.
                                        (0633) ;
                                        (0634) ;  SIDE EFFECTS:
                                        (0635) ;    The A and X registers may be modified by this or future implementations
                                        (0636) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0637) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0638) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0639) ;    functions.
                                        (0640) ;
                                        (0641) 
                                        (0642)  UART_PutSHexInt:
                                        (0643) _UART_PutSHexInt:
                                        (0644)    RAM_PROLOGUE RAM_USE_CLASS_1
051B: 4B       SWAP  A,X                (0645)    swap  A,X
051C: 9F EA    CALL  _UART_PutSHexByte  (0646)    call  UART_PutSHexByte              ; Print MSB
051E: 5B       MOV   A,X                (0647)    mov   A,X                           ; Move LSB into position
051F: 9F E7    CALL  _UART_PutSHexByte  (0648)    call  UART_PutSHexByte              ; Print LSB
                                        (0649)    RAM_EPILOGUE RAM_USE_CLASS_1
0521: 7F       RET                      (0650)    ret
0522: 49 2B 10 TST   REG[0x2B],0x10     
0525: AF FC    JZ    _UART_PutChar      
0527: 60 29    MOV   REG[0x29],A        
                                        (0651) .ENDSECTION
                                        (0652) 
                                        (0653) 
                                        (0654) .SECTION
                                        (0655) ;-----------------------------------------------------------------------------
                                        (0656) ;  FUNCTION NAME: UART_PutChar
                                        (0657) ;
                                        (0658) ;  DESCRIPTION:
                                        (0659) ;     Send character out through UART TX port.
                                        (0660) ;-----------------------------------------------------------------------------
                                        (0661) ;
                                        (0662) ;  ARGUMENTS:
                                        (0663) ;     A has Character to send to UART Tx Port
                                        (0664) ;
                                        (0665) ;  RETURNS:
                                        (0666) ;     none
                                        (0667) ;
                                        (0668) ;  SIDE EFFECTS:
                                        (0669) ;    The A and X registers may be modified by this or future implementations
                                        (0670) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0671) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0672) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0673) ;    functions.
                                        (0674) ;
                                        (0675) 
                                        (0676)    macro InLinePutChar( Source )
                                        (0677) .BufEmptyWaitLoop:
                                        (0678)    tst REG[UART_TX_CONTROL_REG], UART_TX_BUFFER_EMPTY     ; Check Tx Status
                                        (0679)    jz  .BufEmptyWaitLoop
                                        (0680)    mov REG[UART_TX_BUFFER_REG], @Source          ; Write data to Tx Port
                                        (0681)    endm
                                        (0682) 
                                        (0683)  UART_PutChar:
                                        (0684) _UART_PutChar:
                                        (0685)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0686)    InLinePutChar A
                                        (0687)    RAM_EPILOGUE RAM_USE_CLASS_1
0529: 7F       RET                      (0688)    ret
                                        (0689) .ENDSECTION
                                        (0690) 
                                        (0691) 
                                        (0692) .SECTION
                                        (0693) ;-----------------------------------------------------------------------------
                                        (0694) ;  FUNCTION NAME: UART_cGetChar
                                        (0695) ;
                                        (0696) ;  DESCRIPTION:
                                        (0697) ;     Read character from UART RX port.
                                        (0698) ;-----------------------------------------------------------------------------
                                        (0699) ;
                                        (0700) ;  ARGUMENTS:
                                        (0701) ;      none
                                        (0702) ;
                                        (0703) ;  RETURNS:
                                        (0704) ;     char that is returned from UART
                                        (0705) ;
                                        (0706) ;  SIDE EFFECTS:
                                        (0707) ;    The A and X registers may be modified by this or future implementations
                                        (0708) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0709) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0710) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0711) ;    functions.
                                        (0712) ;
                                        (0713) ;    Program flow will stay in this function until a character is received.
                                        (0714) ;    If the watchdog timer is used, care must be taken to make sure that
                                        (0715) ;    the delay between characters is less than the watchdog timeout.
                                        (0716) ;
                                        (0717)  UART_cGetChar:
                                        (0718) _UART_cGetChar:
                                        (0719)    RAM_PROLOGUE RAM_USE_CLASS_1
052A: 49 2F 08 TST   REG[0x2F],0x8      (0720)    tst REG[UART_RX_CONTROL_REG],UART_RX_REG_FULL    ; Check if a character is ready
052D: AF FC    JZ    _UART_cGetChar     (0721)    jz  UART_cGetChar                             ; If not loop
052F: 5D 2E    MOV   A,REG[0x2E]        (0722)    mov A, REG[UART_RX_BUFFER_REG]                ; Get character
                                        (0723)    RAM_EPILOGUE RAM_USE_CLASS_1
0531: 7F       RET                      (0724)    ret
                                        (0725) .ENDSECTION
                                        (0726) 
                                        (0727) 
                                        (0728) .SECTION
                                        (0729) ;-----------------------------------------------------------------------------
                                        (0730) ;  FUNCTION NAME: UART_cReadChar
                                        (0731) ;
                                        (0732) ;  DESCRIPTION:
                                        (0733) ;     Read character from UART RX port.
                                        (0734) ;-----------------------------------------------------------------------------
                                        (0735) ;
                                        (0736) ;  ARGUMENTS:
                                        (0737) ;      none
                                        (0738) ;
                                        (0739) ;  RETURNS:
                                        (0740) ;     char that is returned from UART
                                        (0741) ;
                                        (0742) ;  SIDE EFFECTS:
                                        (0743) ;    The A and X registers may be modified by this or future implementations
                                        (0744) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0745) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0746) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0747) ;    functions.
                                        (0748) ;
                                        (0749) ;    A valid 0x00 character will be ignored, since a 0x00 return value
                                        (0750) ;    implies a valid character or an error condition occured.
                                        (0751) ;
                                        (0752)  UART_cReadChar:
                                        (0753) _UART_cReadChar:
                                        (0754)    RAM_PROLOGUE RAM_USE_CLASS_1
0532: 5D 2F    MOV   A,REG[0x2F]        (0755)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Get Status of RX
0534: 08       PUSH  A                  (0756)    push A
0535: 21 08    AND   A,0x8              (0757)    and  A,UART_RX_COMPLETE                                 ; Check if a character is ready
0537: B0 04    JNZ   0x053C             (0758)    jnz  .RX_DATA_RDY                                       ; Data Ready go read it.
0539: 18       POP   A                  (0759)    pop  A
053A: 80 0B    JMP   0x0546             (0760)    jmp  .RX_NO_VALID_CHAR
                                        (0761) 
                                        (0762) .RX_DATA_RDY:
053C: 5D 2E    MOV   A,REG[0x2E]        (0763)    mov  A,REG[UART_RX_BUFFER_REG ]          
053E: 4B       SWAP  A,X                (0764)    swap A,X                                                ; determine if data is valid
                                        (0765) 
053F: 18       POP   A                  (0766)    pop  A                                                  ; Check for errors
0540: 21 A0    AND   A,0xA0             (0767)    and  A,(UART_RX_PARITY_ERROR | UART_RX_FRAMING_ERROR)
0542: B0 03    JNZ   0x0546             (0768)    jnz  .RX_NO_VALID_CHAR                                  ; No character, exit
0544: 4B       SWAP  A,X                (0769)    swap A,X                                                ; Put data in A and exit
                                        (0770)    RAM_EPILOGUE RAM_USE_CLASS_1
0545: 7F       RET                      (0771)    ret
                                        (0772) 
                                        (0773) .RX_NO_VALID_CHAR:
0546: 50 00    MOV   A,0x0              (0774)    mov A,0x00                                              ; Zero out character
                                        (0775) 
                                        (0776)  End_UART_cReadChar:
                                        (0777)    RAM_EPILOGUE RAM_USE_CLASS_1
0548: 7F       RET                      (0778)    ret
                                        (0779) .ENDSECTION
                                        (0780) 
                                        (0781) 
                                        (0782) .SECTION
                                        (0783) ;-----------------------------------------------------------------------------
                                        (0784) ;  FUNCTION NAME: UART_iReadChar
                                        (0785) ;
                                        (0786) ;  WARNING WARNING WARNING  Negative return value not correct!!!!  We may want
                                        (0787) ;  to just set a value in the upper byte if error conditions exists.
                                        (0788) ;
                                        (0789) ;  DESCRIPTION:
                                        (0790) ;     Read character from UART RX port.
                                        (0791) ;-----------------------------------------------------------------------------
                                        (0792) ;
                                        (0793) ;  ARGUMENTS:
                                        (0794) ;      none
                                        (0795) ;
                                        (0796) ;  RETURNS:
                                        (0797) ;     An integer value is returned.  A negative value inplies and error
                                        (0798) ;     condition, a positive value between 0 and 255 is the return character.
                                        (0799) ;
                                        (0800) ;     Error Codes:
                                        (0801) ;        0x80CC    Parity Error
                                        (0802) ;        0x40CC    Overrun Error
                                        (0803) ;        0x20CC    Framing Error
                                        (0804) ;        0x01CC    No Data available
                                        (0805) ;
                                        (0806) ;  SIDE EFFECTS:
                                        (0807) ;    The A and X registers may be modified by this or future implementations
                                        (0808) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0809) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0810) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0811) ;    functions.
                                        (0812) ;
                                        (0813)  UART_iReadChar:
                                        (0814) _UART_iReadChar:
                                        (0815)    RAM_PROLOGUE RAM_USE_CLASS_1
0549: 5D 2F    MOV   A,REG[0x2F]        (0816)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Get Status of RX
                                        (0817)                                                            ; Mask only errors and data ready
054B: 21 E8    AND   A,0xE8             (0818)    and  A,(UART_RX_ERROR|UART_RX_REG_FULL)
054D: 08       PUSH  A                  (0819)    push A
054E: 21 08    AND   A,0x8              (0820)    and  A,UART_RX_COMPLETE                                 ; Check if a character is ready
0550: B0 07    JNZ   0x0558             (0821)    jnz  .RX_GET_DATA                                       ; Data Ready go read it.
0552: 18       POP   A                  (0822)    pop  A
0553: 29 01    OR    A,0x1              (0823)    or   A,UART_RX_NO_DATA                                  ; Add no data flag
0555: 4B       SWAP  A,X                (0824)    swap A,X
0556: 80 07    JMP   0x055E             (0825)    jmp  End_UART_iReadChar
                                        (0826) 
                                        (0827) .RX_GET_DATA:
0558: 18       POP   A                  (0828)    pop  A
0559: 21 E0    AND   A,0xE0             (0829)    and  A,UART_RX_ERROR
055B: 4B       SWAP  A,X                (0830)    swap A,X
055C: 5D 2E    MOV   A,REG[0x2E]        (0831)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read data first, then
                                        (0832)                                                            ; determine if data is valid
                                        (0833) 
                                        (0834)  End_UART_iReadChar:
                                        (0835)    RAM_EPILOGUE RAM_USE_CLASS_1
055E: 7F       RET                      (0836)    ret
055F: 70 BF    AND   F,0xBF             
0561: 60 D3    MOV   REG[0xD3],A        
                                        (0837) .ENDSECTION
                                        (0838) 
                                        (0839) 
                                        (0840) .SECTION
                                        (0841) ;-----------------------------------------------------------------------------
                                        (0842) ;  FUNCTION NAME: UART_PutString
                                        (0843) ;
                                        (0844) ;  DESCRIPTION:
                                        (0845) ;     Send String out through UART TX port.
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS:
                                        (0849) ;     Pointer to String
                                        (0850) ;     A has MSB of string address
                                        (0851) ;     X has LSB of string address
                                        (0852) ;
                                        (0853) ;  RETURNS:
                                        (0854) ;     none
                                        (0855) ;
                                        (0856) ;  SIDE EFFECTS:
                                        (0857) ;    The A and X registers may be modified by this or future implementations
                                        (0858) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0859) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0860) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0861) ;    functions.
                                        (0862) ;          
                                        (0863) ;    Currently only the page pointer registers listed below are modified: 
                                        (0864) ;          IDX_PP
                                        (0865) ;
                                        (0866)  UART_PutString:
                                        (0867) _UART_PutString:
                                        (0868)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0869)    RAM_SETPAGE_IDX A
                                        (0870) .PutStringLoop:
0563: 52 00    MOV   A,[X+0]            (0871)    mov   A,[X]                                   ; Get value pointed to by X
0565: A0 06    JZ    0x056C             (0872)    jz    End_PutString                           ; Check for end of string
0567: 9F B9    CALL  _UART_PutChar      (0873)    call  UART_PutChar                            ; Send character to Tx port
0569: 75       INC   X                  (0874)    inc   X                                       ; Advance pointer to next character
056A: 8F F8    JMP   0x0563             (0875)    jmp   .PutStringLoop                          ; Get next character
056C: 70 3F    AND   F,0x3F             
056E: 71 C0    OR    F,0xC0             
                                        (0876) 
                                        (0877) End_PutString:
                                        (0878)    RAM_EPILOGUE RAM_USE_CLASS_3
0570: 7F       RET                      (0879)    ret
0571: 70 BF    AND   F,0xBF             
0573: 62 D3 07 MOV   REG[0xD3],0x7      
                                        (0880) .ENDSECTION
                                        (0881)     
                                        (0882) .SECTION
                                        (0883) ;-----------------------------------------------------------------------------
                                        (0884) ;  FUNCTION NAME: UART_Write
                                        (0885) ;
                                        (0886) ;  DESCRIPTION:
                                        (0887) ;     Send String of length X to serial port
                                        (0888) ;-----------------------------------------------------------------------------
                                        (0889) ;
                                        (0890) ;  ARGUMENTS:
                                        (0891) ;     Pointer to String
                                        (0892) ;     [SP-5] Count of characters to send
                                        (0893) ;     [SP-4] has MSB of string address
                                        (0894) ;     [SP-3] has LSB of string address
                                        (0895) ;
                                        (0896) ;  RETURNS:
                                        (0897) ;     none
                                        (0898) ;
                                        (0899) ;  SIDE EFFECTS:
                                        (0900) ;    The A and X registers may be modified by this or future implementations
                                        (0901) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0902) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0903) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0904) ;    functions.
                                        (0905) ;          
                                        (0906) ;    Currently only the page pointer registers listed below are modified: 
                                        (0907) ;          IDX_PP
                                        (0908) ;
                                        (0909) CNT_LEN:    equ -5                               ; Length of data to send
                                        (0910) STR_MSB:    equ -4                               ; MSB pointer of string 
                                        (0911) STR_LSB:    equ -3                               ; LSB pointer of string 
                                        (0912) 
                                        (0913)  UART_Write:
                                        (0914) _UART_Write:
                                        (0915)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0916)    RAM_SETPAGE_IDX2STK                           ; Refer indexed addrs to the stack
0576: 4F       MOV   X,SP               (0917)    mov   X, SP                                   ; Establish the frame pointer 
                                        (0918) 
                                        (0919) .NextByteLoop:
0577: 52 FB    MOV   A,[X-5]            (0920)    mov   A, [X+CNT_LEN]                          ; End of the string?
0579: A0 1A    JZ    0x0594             (0921)    jz    .End_Write                              ;   Yes, prepare to exit
057B: 7B FB    DEC   [X-5]              (0922)    dec   [X+CNT_LEN]                             ; Decrement counter
                                        (0923) 
                                        (0924)    IF SYSTEM_LARGE_MEMORY_MODEL
057D: 52 FC    MOV   A,[X-4]            (0925)    mov   A, [X+STR_MSB]                          ; Load pointer to char to send
                                        (0926)    ENDIF
                                        (0927) 
057F: 59 FD    MOV   X,[X-3]            (0928)    mov   X, [X+STR_LSB]                          ; Load pointer to char to send
0581: 60 D3    MOV   REG[0xD3],A        
                                        (0929)    RAM_SETPAGE_IDX A                             ; switch index pages
0583: 52 00    MOV   A,[X+0]            (0930)    mov   A, [X]                                  ; Grab the data
0585: 49 2B 10 TST   REG[0x2B],0x10     
0588: AF FC    JZ    0x0585             
058A: 60 29    MOV   REG[0x29],A        
                                        (0931)    InLinePutChar A                               ; Put data in empty TX buf reg
058C: 4F       MOV   X,SP               (0932)    mov   X, SP                                   ; Recover frame pointer
058D: 62 D3 07 MOV   REG[0xD3],0x7      
                                        (0933)    RAM_SETPAGE_IDX2STK                           ; Prepare for stack access
0590: 77 FD    INC   [X-3]              (0934)    inc   [X+STR_LSB]                             ; Point to next byte, but do not
0592: 8F E4    JMP   0x0577             (0935)    jmp   .NextByteLoop                           ;    cross RAM page boundary!
0594: 70 3F    AND   F,0x3F             
0596: 71 C0    OR    F,0xC0             
                                        (0936) 
                                        (0937) .End_Write:
                                        (0938)    RAM_EPILOGUE RAM_USE_CLASS_3
0598: 7F       RET                      (0939)    ret
                                        (0940) .ENDSECTION
                                        (0941)     
                                        (0942) 
                                        (0943) .SECTION
                                        (0944) ;-----------------------------------------------------------------------------
                                        (0945) ;  FUNCTION NAME: UART_CWrite
                                        (0946) ;
                                        (0947) ;             WARNING WARNING NOT COMPLETE
                                        (0948) ;
                                        (0949) ;  DESCRIPTION:
                                        (0950) ;     Send String of length X to serial port
                                        (0951) ;-----------------------------------------------------------------------------
                                        (0952) ;
                                        (0953) ;  ARGUMENTS:
                                        (0954) ;     [SP-4] MSB of Count of character to send
                                        (0955) ;     [SP-3] LSB of Count of character to send
                                        (0956) ;     [SP-2] has MSB of string address
                                        (0957) ;     [SP-1] has LSB of string address
                                        (0958) ;
                                        (0959) ;  RETURNS:
                                        (0960) ;     none
                                        (0961) ;
                                        (0962) ;  SIDE EFFECTS:
                                        (0963) ;    The A and X registers may be modified by this or future implementations
                                        (0964) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0965) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0966) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0967) ;    functions.
                                        (0968) ;
                                        (0969) CLEN_MSB:   equ -6           ; MSB Length of data to send
                                        (0970) CLEN_LSB:   equ -5           ; LSB Length of data to send
                                        (0971) CSTR_MSB:   equ -4           ; MSB pointer of string
                                        (0972) CSTR_LSB:   equ -3           ; LSB pointer of string
                                        (0973) 
                                        (0974)  UART_CWrite:
                                        (0975) _UART_CWrite:
                                        (0976)    RAM_PROLOGUE RAM_USE_CLASS_2
0599: 4F       MOV   X,SP               (0977)    mov   X,SP
                                        (0978) .CW_Loop:
059A: 3D FA 00 CMP   [X-6],0x0          (0979)    cmp   [X+CLEN_MSB],0x00                  ; Check for zero counter
059D: B0 06    JNZ   0x05A4             (0980)    jnz   .CW_WRITEIT
059F: 3D FB 00 CMP   [X-5],0x0          (0981)    cmp   [X+CLEN_LSB],0x00
05A2: A0 1D    JZ    0x05C0             (0982)    jz    .End_CWrite                        ; Leave if done
                                        (0983) 
                                        (0984) .CW_WRITEIT:                                
05A4: 10       PUSH  X                  (0985)    push  X                                  ; Save frame pointer
05A5: 52 FC    MOV   A,[X-4]            (0986)    mov   A,[X+CSTR_MSB]
05A7: 59 FD    MOV   X,[X-3]            (0987)    mov   X,[X+CSTR_LSB]
05A9: 28       ROMX                     (0988)    romx                                     ; Get character from ROM
05AA: 49 2B 10 TST   REG[0x2B],0x10     
05AD: AF FC    JZ    0x05AA             
05AF: 60 29    MOV   REG[0x29],A        
                                        (0989)    InLinePutChar A                          ; Put data in empty TX buf reg
05B1: 20       POP   X                  (0990)    pop   X                                  ; Restore frame pointer
05B2: 07 FD 01 ADD   [X-3],0x1          (0991)    add   [X+CSTR_LSB],1                     ; Increment the string pointer
05B5: 0F FC 00 ADC   [X-4],0x0          (0992)    adc   [X+CSTR_MSB],0
05B8: 17 FB 01 SUB   [X-5],0x1          (0993)    sub   [X+CLEN_LSB],0x01                  ; Dec the counter
05BB: 1F FA 00 SBB   [X-6],0x0          (0994)    sbb   [X+CLEN_MSB],0x00
05BE: 8F DB    JMP   0x059A             (0995)    jmp   .CW_Loop
05C0: 70 3F    AND   F,0x3F             
05C2: 71 C0    OR    F,0xC0             
                                        (0996) 
                                        (0997) .End_CWrite:
                                        (0998)    RAM_EPILOGUE RAM_USE_CLASS_2
05C4: 7F       RET                      (0999)    ret
                                        (1000) .ENDSECTION
                                        (1001) 
                                        (1002) 
                                        (1003) .SECTION
                                        (1004) ;-----------------------------------------------------------------------------
                                        (1005) ;  FUNCTION NAME: UART_CPutString
                                        (1006) ;
                                        (1007) ;  DESCRIPTION:
                                        (1008) ;     Send String out through UART TX port.
                                        (1009) ;-----------------------------------------------------------------------------
                                        (1010) ;
                                        (1011) ;  ARGUMENTS:
                                        (1012) ;     Pointer to String
                                        (1013) ;     A has MSB of string address
                                        (1014) ;     X has LSB of string address
                                        (1015) ;
                                        (1016) ;  RETURNS:
                                        (1017) ;     none
                                        (1018) ;
                                        (1019) ;  SIDE EFFECTS:
                                        (1020) ;    The A and X registers may be modified by this or future implementations
                                        (1021) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1022) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1023) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1024) ;    functions.
                                        (1025) ;
                                        (1026)  UART_CPutString:
                                        (1027) _UART_CPutString:
                                        (1028)    RAM_PROLOGUE RAM_USE_CLASS_1
05C5: 08       PUSH  A                  (1029)    push  A                                       ; Store ROM pointer
05C6: 10       PUSH  X                  (1030)    push  X
05C7: 28       ROMX                     (1031)    romx                                          ; Get character from ROM
05C8: A0 0B    JZ    0x05D4             (1032)    jz    .End_CPutString
05CA: 9F 56    CALL  _UART_PutChar      (1033)    call  UART_PutChar                            ; Print character
05CC: 20       POP   X                  (1034)    pop   X
05CD: 18       POP   A                  (1035)    pop   A
05CE: 75       INC   X                  (1036)    inc   X                                       ; Inc LSB of pointer
05CF: DF F5    JNC   _UART_CPutString   (1037)    jnc   UART_CPutString                         ; Check for carry
05D1: 74       INC   A                  (1038)    inc   A                                       ; Inc MSB of pointer
05D2: 8F F2    JMP   _UART_CPutString   (1039)    jmp   UART_CPutString
                                        (1040) 
                                        (1041) 
                                        (1042) .End_CPutString:
05D4: 38 FE    ADD   SP,0xFE            (1043)    add   SP, -2
                                        (1044)    RAM_EPILOGUE RAM_USE_CLASS_1
05D6: 7F       RET                      (1045)    ret
                                        (1046) .ENDSECTION
                                        (1047) 
                                        (1048) 
                                        (1049) .SECTION
                                        (1050) ;-----------------------------------------------------------------------------
                                        (1051) ;  FUNCTION NAME: UART_PutCRLF
                                        (1052) ;
                                        (1053) ;  DESCRIPTION:
                                        (1054) ;     Send a CR and LF
                                        (1055) ;-----------------------------------------------------------------------------
                                        (1056) ;
                                        (1057) ;  ARGUMENTS:
                                        (1058) ;     none.
                                        (1059) ;
                                        (1060) ;  RETURNS:
                                        (1061) ;     none.
                                        (1062) ;
                                        (1063) ;  SIDE EFFECTS:
                                        (1064) ;    The A and X registers may be modified by this or future implementations
                                        (1065) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1066) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1067) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1068) ;    functions.
                                        (1069) ;
                                        (1070)  UART_PutCRLF:
                                        (1071) _UART_PutCRLF:
                                        (1072)    RAM_PROLOGUE RAM_USE_CLASS_1
05D7: 50 0D    MOV   A,0xD              (1073)    mov  A,0x0D                        ; Send CR
05D9: 9F 47    CALL  _UART_PutChar      (1074)    call UART_PutChar
05DB: 50 0A    MOV   A,0xA              (1075)    mov  A,0x0A                        ; Send LF
05DD: 9F 43    CALL  _UART_PutChar      (1076)    call UART_PutChar
                                        (1077)    RAM_EPILOGUE RAM_USE_CLASS_1
05DF: 7F       RET                      (1078)    ret
05E0: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1079) .ENDSECTION
                                        (1080) 
                                        (1081) 
                                        (1082) IF (UART_RXBUF_ENABLE)
                                        (1083) ;=============================================================================
                                        (1084) ;=============================================================================
                                        (1085) ;
                                        (1086) ;     Command Buffer commands
                                        (1087) ;
                                        (1088) ;=============================================================================
                                        (1089) ;=============================================================================
                                        (1090) 
                                        (1091) .SECTION
                                        (1092) ;-----------------------------------------------------------------------------
                                        (1093) ;  FUNCTION NAME: UART_CmdReset
                                        (1094) ;
                                        (1095) ;  DESCRIPTION:
                                        (1096) ;     Reset command string and status flags
                                        (1097) ;-----------------------------------------------------------------------------
                                        (1098) ;
                                        (1099) ;  ARGUMENTS:
                                        (1100) ;     none.
                                        (1101) ;
                                        (1102) ;  RETURNS:
                                        (1103) ;     none.
                                        (1104) ;
                                        (1105) ;  SIDE EFFECTS:
                                        (1106) ;    The A and X registers may be modified by this or future implementations
                                        (1107) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1108) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1109) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1110) ;    functions.
                                        (1111) ;          
                                        (1112) ;    Currently only the page pointer registers listed below are modified: 
                                        (1113) ;          CUR_PP
                                        (1114) ;
                                        (1115) ;  THEORY of OPERATION or PROCEDURE:
                                        (1116) ;     Clear the command buffer, command counter, and flag.
                                        (1117) ;
                                        (1118)  UART_CmdReset:
                                        (1119) _UART_CmdReset:
                                        (1120)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1121)    RAM_SETPAGE_CUR >UART_aRxBuffer
05E3: 55 02 00 MOV   [0x2],0x0          (1122)    mov [UART_aRxBuffer], 0x00
05E6: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1123)    RAM_SETPAGE_CUR >UART_bRxCnt
05E9: 55 01 00 MOV   [0x1],0x0          (1124)    mov [UART_bRxCnt], 0x00
05EC: 26 00 00 AND   [0x0],0x0          (1125)    and [UART_fStatus], 0x00
05EF: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1126)    RAM_SETPAGE_CUR >ptrParam
05F2: 55 14 00 MOV   [0x14],0x0         (1127)    mov [ptrParam],0x00
                                        (1128)    RAM_EPILOGUE RAM_USE_CLASS_4
05F5: 7F       RET                      (1129)    ret
05F6: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1130) .ENDSECTION
                                        (1131) 
                                        (1132) 
                                        (1133) .SECTION
                                        (1134) ;-----------------------------------------------------------------------------
                                        (1135) ;  FUNCTION NAME: UART_bCmdCheck
                                        (1136) ;
                                        (1137) ;  DESCRIPTION:
                                        (1138) ;     Check to see if valid command in buffer.
                                        (1139) ;-----------------------------------------------------------------------------
                                        (1140) ;
                                        (1141) ;  ARGUMENTS:
                                        (1142) ;     none.
                                        (1143) ;
                                        (1144) ;  RETURNS:
                                        (1145) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1146) ;                     Returns non-zero value in A if command is valid.
                                        (1147) ;
                                        (1148) ;  SIDE EFFECTS:
                                        (1149) ;    The A and X registers may be modified by this or future implementations
                                        (1150) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1151) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1152) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1153) ;    functions.
                                        (1154) ;          
                                        (1155) ;    Currently only the page pointer registers listed below are modified: 
                                        (1156) ;          CUR_PP
                                        (1157) ;
                                        (1158) ;  THEORY of OPERATION or PROCEDURE:
                                        (1159) ;     Read the status and control register.
                                        (1160) ;
                                        (1161)  UART_bCmdCheck:
                                        (1162) _UART_bCmdCheck:
                                        (1163)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1164)    RAM_SETPAGE_CUR >UART_fStatus
05F9: 51 00    MOV   A,[0x0]            (1165)    mov A,  [UART_fStatus]
05FB: 21 01    AND   A,0x1              (1166)    and A, UART_RX_BUF_CMDTERM                    ; Mask off Command status
                                        (1167)    RAM_EPILOGUE RAM_USE_CLASS_4
05FD: 7F       RET                      (1168)    ret
05FE: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1169) .ENDSECTION
                                        (1170)     
                                        (1171) 
                                        (1172) .SECTION
                                        (1173) ;-----------------------------------------------------------------------------
                                        (1174) ;  FUNCTION NAME: UART_bErrCheck
                                        (1175) ;
                                        (1176) ;  DESCRIPTION:
                                        (1177) ;     Check to see if an error has occured since last CmdReset
                                        (1178) ;-----------------------------------------------------------------------------
                                        (1179) ;
                                        (1180) ;  ARGUMENTS:
                                        (1181) ;     none.
                                        (1182) ;
                                        (1183) ;  RETURNS:
                                        (1184) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1185) ;                     Returns non-zero value in A if command is valid.
                                        (1186) ;           0x80 => Parity Error
                                        (1187) ;           0x40 => OverRun Error
                                        (1188) ;           0x20 => Framing Error
                                        (1189) ;           0x10 => Software Buffer OverRun
                                        (1190) ;
                                        (1191) ;  SIDE EFFECTS:
                                        (1192) ;    The A and X registers may be modified by this or future implementations
                                        (1193) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1194) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1195) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1196) ;    functions.
                                        (1197) ;          
                                        (1198) ;    Currently only the page pointer registers listed below are modified: 
                                        (1199) ;          CUR_PP
                                        (1200) ;     Error Status is clear when read.
                                        (1201) ;
                                        (1202) ;  THEORY of OPERATION or PROCEDURE:
                                        (1203) ;     Read RX buffer error status and clear status
                                        (1204) ;
                                        (1205)  UART_bErrCheck:
                                        (1206) _UART_bErrCheck:
                                        (1207)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1208)    RAM_SETPAGE_CUR >UART_fStatus
0601: 51 00    MOV   A,[0x0]            (1209)    mov A,  [UART_fStatus]
0603: 21 F0    AND   A,0xF0             (1210)    and A, UART_RX_BUF_ERROR                      ; Mask off Error status
0605: 26 00 0F AND   [0x0],0xF          (1211)    and [UART_fStatus], ~UART_RX_BUF_ERROR
                                        (1212)    RAM_EPILOGUE RAM_USE_CLASS_4
0608: 7F       RET                      (1213)    ret
0609: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1214) .ENDSECTION
                                        (1215) 
                                        (1216) .SECTION
                                        (1217) ;-----------------------------------------------------------------------------
                                        (1218) ;  FUNCTION NAME: UART_bCmdLength
                                        (1219) ;
                                        (1220) ;  DESCRIPTION:
                                        (1221) ;     Get length of command string
                                        (1222) ;-----------------------------------------------------------------------------
                                        (1223) ;
                                        (1224) ;  ARGUMENTS:
                                        (1225) ;     none.
                                        (1226) ;
                                        (1227) ;  RETURNS:
                                        (1228) ;     BYTE  bRxCnt    Returns the command length in A.
                                        (1229) ;
                                        (1230) ;  SIDE EFFECTS:
                                        (1231) ;    The A and X registers may be modified by this or future implementations
                                        (1232) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1233) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1234) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1235) ;    functions.
                                        (1236) ;          
                                        (1237) ;    Currently only the page pointer registers listed below are modified: 
                                        (1238) ;          CUR_PP
                                        (1239) ;
                                        (1240)  UART_bCmdLength:
                                        (1241) _UART_bCmdLength:
                                        (1242)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1243)    RAM_SETPAGE_CUR >UART_bRxCnt
060C: 51 01    MOV   A,[0x1]            (1244)    mov A,  [UART_bRxCnt]
                                        (1245)    RAM_EPILOGUE RAM_USE_CLASS_4
060E: 7F       RET                      (1246)    ret
060F: 70 BF    AND   F,0xBF             
0611: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1247) .ENDSECTION
                                        (1248) 
                                        (1249) 
                                        (1250) .SECTION
                                        (1251) ;-----------------------------------------------------------------------------
                                        (1252) ;  FUNCTION NAME: UART_szGetParam
                                        (1253) ;
                                        (1254) ;  DESCRIPTION:
                                        (1255) ;      Return next parameter from UART Rx buffer
                                        (1256) ;-----------------------------------------------------------------------------
                                        (1257) ;
                                        (1258) ;  ARGUMENTS:  none
                                        (1259) ;
                                        (1260) ;  RETURNS:
                                        (1261) ;     A => MSB of parameter address
                                        (1262) ;     X => LSB of parameter address
                                        (1263) ;
                                        (1264) ;  SIDE EFFECTS:
                                        (1265) ;    The A and X registers may be modified by this or future implementations
                                        (1266) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1268) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1269) ;    functions.
                                        (1270) ;          
                                        (1271) ;    Currently only the page pointer registers listed below are modified: 
                                        (1272) ;          CUR_PP
                                        (1273) ;          IDX_PP
                                        (1274) ;
                                        (1275) ;     The receive string is modified by placing Null characters at the end
                                        (1276) ;     of each parameter as they are recovered.
                                        (1277) ;
                                        (1278) ;  THEORY OF OPERATION:
                                        (1279) ;     This function is a stateful generator of addresses to the "parameters"
                                        (1280) ;     of an input "Command". It scans the (optional) input buffer and breaks
                                        (1281) ;     each lexically distinct element into a null-terminated string by replacing
                                        (1282) ;     delimiters with nulls, as appropriate. The state of the generator is 
                                        (1283) ;     maintained by the private variable ptrParam, which is a buffer-relative
                                        (1284) ;     offset. The generator is initialized by a call to the function
                                        (1285) ;     UART_CmdReset which resets the entire buffer to the 'empty'
                                        (1286) ;     state. Typically this function, UART_szGetParam, is
                                        (1287) ;     not called until the buffer has been loaded with an entire command
                                        (1288) ;     (See UART_bCmdCheck).
                                        (1289) ;
                                        (1290) ;     Note, there is no special distinction between the "command" and the 
                                        (1291) ;     "parameters". The first non-delimiter character of the buffer---the first
                                        (1292) ;     character of the "command"---is also, for the purposes of this function,
                                        (1293) ;     the first "parameter" to which it returns an address.
                                        (1294) ;
                                        (1295) ;     The value of a delimiter (commonly an ascii space, 0x20 and decimal 32)
                                        (1296) ;     is determined at configuration time by a user module parameter.
                                        (1297) ;
                                        (1298)  UART_szGetParam:
                                        (1299) _UART_szGetParam:
                                        (1300)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1301)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (1302)     
                                        (1303)    RAM_SETPAGE_CUR >ptrParam
0614: 50 02    MOV   A,0x2              (1304)    mov   A, <UART_aRxBuffer                 ; Get address to receive buffer
0616: 02 14    ADD   A,[0x14]           (1305)    add   A, [ptrParam]                      ; Add string offset
0618: 5C       MOV   X,A                (1306)    mov   X, A
0619: 62 D3 00 MOV   REG[0xD3],0x0      
                                        (1307)    RAM_SETPAGE_IDX >UART_aRxBuffer
061C: 52 00    MOV   A,[X+0]            (1308)    mov   A, [X]                             ; Get character pointed by X
061E: B0 04    JNZ   0x0623             (1309)    jnz   .SkipOverDelimitersLoop            ; Null? No,  continue...
0620: 10       PUSH  X                  (1310)    push  X                                  ;       Yes, Save LSB of current pointer
0621: 80 33    JMP   0x0655             (1311)    jmp   .End_GetNextParam
                                        (1312)                                             ; Check for delimiter and keep looping until
                                        (1313)                                             ; all leading delimiters have been found.
                                        (1314) .SkipOverDelimitersLoop:
0623: 39 20    CMP   A,0x20             (1315)    cmp   A, UART_DELIMITER                  ; Do we have a delimiter?
0625: B0 11    JNZ   0x0637             (1316)    jnz   .ParamStartFound                   ;   No,  Bingo! found a parameter
0627: 75       INC   X                  (1317)    inc   X                                  ;   Yes, Increment both index and...
0628: 76 14    INC   [0x14]             (1318)    inc   [ptrParam]                         ;          the stored pointer.
062A: 52 00    MOV   A,[X+0]            (1319)    mov   A, [X]                             ; Get character pointed by X
062C: 3C 14 0F CMP   [0x14],0xF         (1320)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; End of buffer?
062F: BF F3    JNZ   0x0623             (1321)    jnz   .SkipOverDelimitersLoop            ;   No,  continue the scan
                                        (1322) 
                                        (1323) .EndOfString:                               ;   Yes, end of string found...
0631: 10       PUSH  X                  (1324)    push  X                                  ;        Save ptr
                                        (1325) .TerminateString:
0632: 56 00 00 MOV   [X+0],0x0          (1326)    mov   [X], 0x00                          ; Make sure string is zero
0635: 80 1F    JMP   0x0655             (1327)    jmp   .End_GetNextParam
                                        (1328) 
                                        (1329) .ParamStartFound:
0637: 10       PUSH  X                  (1330)    push  X                                  ; Beginning of parameter found, save pointer
                                        (1331) 
                                        (1332) .ParamLoop:                                 ; Now loop until end of parameter found.
0638: 75       INC   X                  (1333)    inc   X                                  ; Advance pointers.
0639: 76 14    INC   [0x14]             (1334)    inc   [ptrParam]
063B: 3C 14 0F CMP   [0x14],0xF         (1335)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
063E: AF F3    JZ    0x0632             (1336)    jz    .TerminateString
0640: 52 00    MOV   A,[X+0]            (1337)    mov   A, [X]                             ; Get next character
0642: A0 12    JZ    0x0655             (1338)    jz    .End_GetNextParam
0644: 39 20    CMP   A,0x20             (1339)    cmp   A, UART_DELIMITER                  ; Check if we have a delimiter
0646: BF F1    JNZ   0x0638             (1340)    jnz   .ParamLoop                         ; Still no delimiter, loop again
0648: 56 00 00 MOV   [X+0],0x0          (1341)    mov   [X], 0x00                          ; Replace delimiter with null for end of substring
064B: 76 14    INC   [0x14]             (1342)    inc   [ptrParam]
064D: 3C 14 0F CMP   [0x14],0xF         (1343)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
0650: B0 04    JNZ   0x0655             (1344)    jnz   .End_GetNextParam                  ; If not end of string leave
0652: 55 14 0F MOV   [0x14],0xF         (1345)    mov   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Reset pointer to end of string.
                                        (1346) 
                                        (1347) .End_GetNextParam:
0655: 20       POP   X                  (1348)    pop   X
0656: 10       PUSH  X                  (1349)    push  X
0657: 3D 00 00 CMP   [X+0],0x0          (1350)    cmp   [X], 0x00
065A: B0 0A    JNZ   0x0665             (1351)    jnz   .NotNullString
065C: 20       POP   X                  (1352)    pop   X
065D: 57 00    MOV   X,0x0              (1353)    mov   X, 0x00
065F: 5B       MOV   A,X                (1354)    mov   A, X
0660: 70 3F    AND   F,0x3F             
0662: 71 C0    OR    F,0xC0             
                                        (1355)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1356)    RAM_EPILOGUE RAM_USE_CLASS_4
0664: 7F       RET                      (1357)    ret
                                        (1358) 
                                        (1359) .NotNullString:
0665: 20       POP   X                  (1360)    pop  X
0666: 50 00    MOV   A,0x0              (1361)    mov  A, >UART_aRxBuffer                  ; Return pointer
0668: 70 3F    AND   F,0x3F             
066A: 71 C0    OR    F,0xC0             
                                        (1362)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1363)    RAM_EPILOGUE RAM_USE_CLASS_4
066C: 7F       RET                      (1364)    ret
066D: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1365) .ENDSECTION
                                        (1366) 
                                        (1367) 
                                        (1368) .SECTION
                                        (1369) ;-----------------------------------------------------------------------------
                                        (1370) ;  FUNCTION NAME: UART_szGetRestOfParams
                                        (1371) ;
                                        (1372) ;  DESCRIPTION:
                                        (1373) ;      Returns a pointer to the rest of the UART RX buffer
                                        (1374) ;-----------------------------------------------------------------------------
                                        (1375) ;
                                        (1376) ;  ARGUMENTS:  none
                                        (1377) ;
                                        (1378) ;  RETURNS:
                                        (1379) ;     A => MSB of parameter
                                        (1380) ;     X => LSB of parameter
                                        (1381) ;
                                        (1382) ;  SIDE EFFECTS:
                                        (1383) ;    The A and X registers may be modified by this or future implementations
                                        (1384) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1385) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1386) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1387) ;    functions.
                                        (1388) ;          
                                        (1389) ;    Currently only the page pointer registers listed below are modified: 
                                        (1390) ;          CUR_PP
                                        (1391) ;
                                        (1392)  UART_szGetRestOfParams:
                                        (1393) _UART_szGetRestOfParams:
                                        (1394)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1395)    RAM_SETPAGE_CUR >ptrParam
0670: 50 02    MOV   A,0x2              (1396)    mov  A, <UART_aRxBuffer                  ; Get address to receive buffer
0672: 02 14    ADD   A,[0x14]           (1397)    add  A, [ptrParam]                       ; Add string offset
0674: 5C       MOV   X,A                (1398)    mov  X,A
0675: 50 00    MOV   A,0x0              (1399)    mov  A,>UART_aRxBuffer                   ; Return pointer
                                        (1400)    RAM_EPILOGUE RAM_USE_CLASS_4
0677: 7F       RET                      (1401)    ret
                                        (1402) .ENDSECTION
                                        (1403) 
                                        (1404) ENDIF
                                        (1405) 
                                        (1406) 
                                        (1407) ; End of File UART.asm
FILE: E:\Users\paul\DOCUME~1\GitHub\ECE405~1\MICROP~1\MICROP~1\main.c
(0001) //----------------------------------------------------------------------------
(0002) // C main line
(0003) //----------------------------------------------------------------------------
(0004) 
(0005) #include <m8c.h>        // part specific constants and macros
(0006) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0007) 
(0008) 
(0009) void main(void)
(0010) {
(0011) 	M8C_EnableGInt ; // Uncomment this line to enable Global Interrupts
__UserModules_end|_main|__text_start|_main:
    0678: 71 01    OR    F,0x1
(0012) 	
(0013) 	UART_CLOCK_Start();
    067A: 10       PUSH  X
    067B: 7C 04 4C LCALL _UART_CLOCK_Start
    067E: 20       POP   X
(0014) 	UART_Start(UART_PARITY_NONE);
    067F: 10       PUSH  X
    0680: 50 00    MOV   A,0x0
    0682: 7C 04 AE LCALL _UART_Start
    0685: 20       POP   X
(0015) 	
(0016) 	 UART_CPutString("\r\nWelcome to PSoC UART test program. V1.1 \r\n");
    0686: 10       PUSH  X
(0017) 	
(0018) 	// Insert your main routine code here.
(0019) }
    0687: 50 01    MOV   A,0x1
    0689: 08       PUSH  A
    068A: 50 A0    MOV   A,0xA0
    068C: 5C       MOV   X,A
    068D: 18       POP   A
    068E: 7C 05 C5 LCALL _UART_CPutString
    0691: 20       POP   X
    0692: 8F FF    JMP   0x0692
